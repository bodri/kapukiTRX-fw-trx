
kapukiTRX-hw-trx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b0  080063b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b8  080063b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080063c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000000c  080063cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080063cc  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018164  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c12  00000000  00000000  000381a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016a0  00000000  00000000  0003adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  0003c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027976  00000000  00000000  0003d970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127c1  00000000  00000000  000652e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff35c  00000000  00000000  00077aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006060  00000000  00000000  00176e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006370 	.word	0x08006370

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006370 	.word	0x08006370

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_FDCAN3_Init>:

FDCAN_HandleTypeDef hfdcan3;

/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0

  hfdcan3.Instance = FDCAN3;
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <MX_FDCAN3_Init+0x84>)
 8000520:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000530:	2200      	movs	r2, #0
 8000532:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000536:	2200      	movs	r2, #0
 8000538:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800053c:	2200      	movs	r2, #0
 800053e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000542:	2201      	movs	r2, #1
 8000544:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000548:	2201      	movs	r2, #1
 800054a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800054e:	2202      	movs	r2, #2
 8000550:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000554:	2202      	movs	r2, #2
 8000556:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800055a:	2201      	movs	r2, #1
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000560:	2201      	movs	r2, #1
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000566:	2201      	movs	r2, #1
 8000568:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800056c:	2201      	movs	r2, #1
 800056e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.StdFiltersNbr = 0;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000578:	2200      	movs	r2, #0
 800057a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_FDCAN3_Init+0x80>)
 800057e:	2200      	movs	r2, #0
 8000580:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_FDCAN3_Init+0x80>)
 8000584:	f001 fa02 	bl	800198c <HAL_FDCAN_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_FDCAN3_Init+0x7a>
  {
    Error_Handler();
 800058e:	f000 fb82 	bl	8000c96 <Error_Handler>
  }

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028
 800059c:	40006c00 	.word	0x40006c00

080005a0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN3)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a17      	ldr	r2, [pc, #92]	; (800061c <HAL_FDCAN_MspInit+0x7c>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d127      	bne.n	8000612 <HAL_FDCAN_MspInit+0x72>
  {
  /* USER CODE BEGIN FDCAN3_MspInit 0 */

  /* USER CODE END FDCAN3_MspInit 0 */
    /* FDCAN3 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005cc:	6593      	str	r3, [r2, #88]	; 0x58
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_FDCAN_MspInit+0x80>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN3 GPIO Configuration    
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX 
    */
    GPIO_InitStruct.Pin = CANRX_Pin|CANTX_Pin;
 80005f2:	2318      	movs	r3, #24
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000602:	230b      	movs	r3, #11
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_FDCAN_MspInit+0x84>)
 800060e:	f001 fb83 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40006c00 	.word	0x40006c00
 8000620:	40021000 	.word	0x40021000
 8000624:	48000400 	.word	0x48000400

08000628 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063e:	4bb8      	ldr	r3, [pc, #736]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4ab7      	ldr	r2, [pc, #732]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000644:	f043 0310 	orr.w	r3, r3, #16
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4bb5      	ldr	r3, [pc, #724]	; (8000920 <MX_GPIO_Init+0x2f8>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0310 	and.w	r3, r3, #16
 8000652:	61bb      	str	r3, [r7, #24]
 8000654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4bb2      	ldr	r3, [pc, #712]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4ab1      	ldr	r2, [pc, #708]	; (8000920 <MX_GPIO_Init+0x2f8>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4baf      	ldr	r3, [pc, #700]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4bac      	ldr	r3, [pc, #688]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4aab      	ldr	r2, [pc, #684]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4ba9      	ldr	r3, [pc, #676]	; (8000920 <MX_GPIO_Init+0x2f8>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4ba6      	ldr	r3, [pc, #664]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4aa5      	ldr	r2, [pc, #660]	; (8000920 <MX_GPIO_Init+0x2f8>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4ba3      	ldr	r3, [pc, #652]	; (8000920 <MX_GPIO_Init+0x2f8>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4ba0      	ldr	r3, [pc, #640]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a9f      	ldr	r2, [pc, #636]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b9d      	ldr	r3, [pc, #628]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b9a      	ldr	r3, [pc, #616]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a99      	ldr	r2, [pc, #612]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b97      	ldr	r3, [pc, #604]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ce:	4b94      	ldr	r3, [pc, #592]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a93      	ldr	r2, [pc, #588]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b91      	ldr	r3, [pc, #580]	; (8000920 <MX_GPIO_Init+0x2f8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDBLUE_Pin|LEDGREEN_Pin|LEDRED_Pin|BNORESET_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f248 0138 	movw	r1, #32824	; 0x8038
 80006ec:	488d      	ldr	r0, [pc, #564]	; (8000924 <MX_GPIO_Init+0x2fc>)
 80006ee:	f001 fc95 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CANEN_Pin|RF1RXEN_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006f8:	488a      	ldr	r0, [pc, #552]	; (8000924 <MX_GPIO_Init+0x2fc>)
 80006fa:	f001 fc8f 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSEN_Pin|PWMOE_Pin|RF2RXEN_Pin|RF2NRESET_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8000704:	4888      	ldr	r0, [pc, #544]	; (8000928 <MX_GPIO_Init+0x300>)
 8000706:	f001 fc89 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF1TXEN_GPIO_Port, RF1TXEN_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000710:	4886      	ldr	r0, [pc, #536]	; (800092c <MX_GPIO_Init+0x304>)
 8000712:	f001 fc83 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF2NSS_GPIO_Port, RF2NSS_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f001 fc7d 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFPOWEREN_Pin|RF2TXEN_Pin|RF1NSS_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f241 0103 	movw	r1, #4099	; 0x1003
 8000728:	4881      	ldr	r0, [pc, #516]	; (8000930 <MX_GPIO_Init+0x308>)
 800072a:	f001 fc77 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF1NRESET_GPIO_Port, RF1NRESET_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000734:	487d      	ldr	r0, [pc, #500]	; (800092c <MX_GPIO_Init+0x304>)
 8000736:	f001 fc71 	bl	800201c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LEDBLUE_Pin|LEDGREEN_Pin|LEDRED_Pin;
 800073a:	2338      	movs	r3, #56	; 0x38
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4874      	ldr	r0, [pc, #464]	; (8000924 <MX_GPIO_Init+0x2fc>)
 8000752:	f001 fae1 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TXMODE_Pin;
 8000756:	2340      	movs	r3, #64	; 0x40
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TXMODE_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	4871      	ldr	r0, [pc, #452]	; (8000930 <MX_GPIO_Init+0x308>)
 800076a:	f001 fad5 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD1 PD2 PD0 
                           PD3 PD14 PD10 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0 
 800076e:	f246 432f 	movw	r3, #25647	; 0x642f
 8000772:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000774:	2303      	movs	r3, #3
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	486a      	ldr	r0, [pc, #424]	; (800092c <MX_GPIO_Init+0x304>)
 8000784:	f001 fac8 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE2 PE0 PE7 
                           PE12 PE8 PE9 PE11 
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_7 
 8000788:	f645 3387 	movw	r3, #23431	; 0x5b87
 800078c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11 
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4861      	ldr	r0, [pc, #388]	; (8000924 <MX_GPIO_Init+0x2fc>)
 800079e:	f001 fabb 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB5 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_2|GPIO_PIN_10;
 80007a2:	f240 43a4 	movw	r3, #1188	; 0x4a4
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	485e      	ldr	r0, [pc, #376]	; (8000930 <MX_GPIO_Init+0x308>)
 80007b8:	f001 faae 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC13 PC8 
                           PC2 PC0 PC1 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_8 
 80007bc:	f24e 1347 	movw	r3, #57671	; 0xe147
 80007c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4855      	ldr	r0, [pc, #340]	; (8000928 <MX_GPIO_Init+0x300>)
 80007d2:	f001 faa1 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CANEN_Pin|BNORESET_Pin|RF1RXEN_Pin;
 80007d6:	f24a 0340 	movw	r3, #41024	; 0xa040
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	484d      	ldr	r0, [pc, #308]	; (8000924 <MX_GPIO_Init+0x2fc>)
 80007f0:	f001 fa92 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 PA8 PA1 
                           PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_1 
 80007f4:	f641 130a 	movw	r3, #6410	; 0x190a
 80007f8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f001 fa84 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF10 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_2;
 8000810:	f240 4304 	movw	r3, #1028	; 0x404
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4843      	ldr	r0, [pc, #268]	; (8000934 <MX_GPIO_Init+0x30c>)
 8000826:	f001 fa77 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPSEN_Pin|PWMOE_Pin;
 800082a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000838:	2302      	movs	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4839      	ldr	r0, [pc, #228]	; (8000928 <MX_GPIO_Init+0x300>)
 8000844:	f001 fa68 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4836      	ldr	r0, [pc, #216]	; (8000938 <MX_GPIO_Init+0x310>)
 800085e:	f001 fa5b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RF2RXEN_Pin|RF2NRESET_Pin;
 8000862:	2328      	movs	r3, #40	; 0x28
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	482b      	ldr	r0, [pc, #172]	; (8000928 <MX_GPIO_Init+0x300>)
 800087a:	f001 fa4d 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BMPINT_Pin|RF1IRQ_Pin;
 800087e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000884:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0x314>)
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <MX_GPIO_Init+0x304>)
 8000894:	f001 fa40 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RF1TXEN_Pin|RF1NRESET_Pin;
 8000898:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481e      	ldr	r0, [pc, #120]	; (800092c <MX_GPIO_Init+0x304>)
 80008b2:	f001 fa31 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF2NSS_Pin;
 80008b6:	2310      	movs	r3, #16
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RF2NSS_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f001 fa22 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFPOWEREN_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RFPOWEREN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_GPIO_Init+0x308>)
 80008ec:	f001 fa14 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BNOINT_Pin;
 80008f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_GPIO_Init+0x314>)
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNOINT_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <MX_GPIO_Init+0x308>)
 8000906:	f001 fa07 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF1BUSY_Pin;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF1BUSY_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	e00f      	b.n	8000940 <MX_GPIO_Init+0x318>
 8000920:	40021000 	.word	0x40021000
 8000924:	48001000 	.word	0x48001000
 8000928:	48000800 	.word	0x48000800
 800092c:	48000c00 	.word	0x48000c00
 8000930:	48000400 	.word	0x48000400
 8000934:	48001400 	.word	0x48001400
 8000938:	48001800 	.word	0x48001800
 800093c:	10110000 	.word	0x10110000
 8000940:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_GPIO_Init+0x378>)
 8000942:	f001 f9e9 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF2BUSY_Pin;
 8000946:	2310      	movs	r3, #16
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF2BUSY_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4812      	ldr	r0, [pc, #72]	; (80009a4 <MX_GPIO_Init+0x37c>)
 800095a:	f001 f9dd 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RF2TXEN_Pin|RF1NSS_Pin;
 800095e:	f241 0302 	movw	r3, #4098	; 0x1002
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_GPIO_Init+0x380>)
 8000978:	f001 f9ce 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF2IRQ_Pin;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_GPIO_Init+0x384>)
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF2IRQ_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_GPIO_Init+0x388>)
 8000992:	f001 f9c1 	bl	8001d18 <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	48000c00 	.word	0x48000c00
 80009a4:	48000800 	.word	0x48000800
 80009a8:	48000400 	.word	0x48000400
 80009ac:	10110000 	.word	0x10110000
 80009b0:	48001000 	.word	0x48001000

080009b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_I2C1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F08BFF;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <MX_I2C1_Init+0x7c>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0x28;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009f0:	f001 fb2c 	bl	800204c <HAL_I2C_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f000 f94c 	bl	8000c96 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80009fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a04:	f001 fe94 	bl	8002730 <HAL_I2CEx_ConfigAnalogFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a0e:	f000 f942 	bl	8000c96 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a16:	f001 fed6 	bl	80027c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a20:	f000 f939 	bl	8000c96 <Error_Handler>
  }

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	00f08bff 	.word	0x00f08bff

08000a34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_I2C_MspInit+0x94>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d134      	bne.n	8000ac0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB9     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 8000a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <HAL_I2C_MspInit+0x9c>)
 8000a8c:	f001 f944 	bl	8001d18 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_I2C_MspInit+0xa0>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_I2C_MspInit+0xa0>)
 8000a96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a9a:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_I2C_MspInit+0xa0>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <HAL_I2C_MspInit+0xa0>)
 8000aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa6:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_I2C_MspInit+0x98>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 fdde 	bl	800169e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f86b 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f7ff fd9f 	bl	8000628 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aea:	f000 f8db 	bl	8000ca4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000aee:	f000 fa43 	bl	8000f78 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000af2:	f000 fadf 	bl	80010b4 <MX_TIM5_Init>
  MX_SPI2_Init();
 8000af6:	f000 f913 	bl	8000d20 <MX_SPI2_Init>
  MX_FDCAN3_Init();
 8000afa:	f7ff fd0d 	bl	8000518 <MX_FDCAN3_Init>
  MX_I2C1_Init();
 8000afe:	f7ff ff59 	bl	80009b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 fc83 	bl	800140c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b06:	f000 fccd 	bl	80014a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_GPIO_WritePin(LEDBLUE_GPIO_Port, LEDBLUE_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(RFPOWEREN_GPIO_Port, RFPOWEREN_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(PWMOE_GPIO_Port, PWMOE_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <main+0xd0>)
 8000b10:	f001 fa84 	bl	800201c <HAL_GPIO_WritePin>

//  HAL_GPIO_WritePin(BNORESET_GPIO_Port, BNORESET_Pin, GPIO_PIN_SET);

  unsigned char buffer[5];
  memset(buffer, 0, 5);
 8000b14:	463b      	mov	r3, r7
 8000b16:	2205      	movs	r2, #5
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fc20 	bl	8006360 <memset>
  unsigned short address = 0x0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b24:	2100      	movs	r1, #0
 8000b26:	4821      	ldr	r0, [pc, #132]	; (8000bac <main+0xd4>)
 8000b28:	f002 ffac 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	481f      	ldr	r0, [pc, #124]	; (8000bac <main+0xd4>)
 8000b30:	f002 ffa8 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b34:	2108      	movs	r1, #8
 8000b36:	481d      	ldr	r0, [pc, #116]	; (8000bac <main+0xd4>)
 8000b38:	f002 ffa4 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b3c:	210c      	movs	r1, #12
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <main+0xd4>)
 8000b40:	f002 ffa0 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <main+0xd8>)
 8000b48:	f002 ff9c 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4818      	ldr	r0, [pc, #96]	; (8000bb0 <main+0xd8>)
 8000b50:	f002 ff98 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000b54:	2108      	movs	r1, #8
 8000b56:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <main+0xd8>)
 8000b58:	f002 ff94 	bl	8003a84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000b5c:	210c      	movs	r1, #12
 8000b5e:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <main+0xd8>)
 8000b60:	f002 ff90 	bl	8003a84 <HAL_TIM_PWM_Start>
//	  HAL_Delay(20);
//	  if (HAL_I2C_Master_Receive(&hi2c1, 0x28, buffer, 1, 1000) == HAL_OK) {
//		  HAL_GPIO_WritePin(LEDGREEN_GPIO_Port, LEDGREEN_Pin, GPIO_PIN_RESET);
//	  }

	  if (HAL_I2C_Mem_Read(&hi2c1, 0x50, 0, 1, buffer, 1, 1000) == HAL_OK) {
 8000b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	463b      	mov	r3, r7
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	2200      	movs	r2, #0
 8000b76:	2150      	movs	r1, #80	; 0x50
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <main+0xdc>)
 8000b7a:	f001 faf7 	bl	800216c <HAL_I2C_Mem_Read>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <main+0xb6>
		  HAL_GPIO_WritePin(LEDGREEN_GPIO_Port, LEDGREEN_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2120      	movs	r1, #32
 8000b88:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <main+0xe0>)
 8000b8a:	f001 fa47 	bl	800201c <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fdf6 	bl	8001780 <HAL_Delay>
	  address++;
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	3301      	adds	r3, #1
 8000b98:	80fb      	strh	r3, [r7, #6]
	  if (address > 0xFF) {
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2bff      	cmp	r3, #255	; 0xff
 8000b9e:	d9e1      	bls.n	8000b64 <main+0x8c>
		  address = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	80fb      	strh	r3, [r7, #6]
	  if (HAL_I2C_Mem_Read(&hi2c1, 0x50, 0, 1, buffer, 1, 1000) == HAL_OK) {
 8000ba4:	e7de      	b.n	8000b64 <main+0x8c>
 8000ba6:	bf00      	nop
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	200001e0 	.word	0x200001e0
 8000bb0:	200001a0 	.word	0x200001a0
 8000bb4:	2000008c 	.word	0x2000008c
 8000bb8:	48001000 	.word	0x48001000

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0a8      	sub	sp, #160	; 0xa0
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bc6:	2238      	movs	r2, #56	; 0x38
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 fbc8 	bl	8006360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2254      	movs	r2, #84	; 0x54
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fbba 	bl	8006360 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f001 fe37 	bl	8002860 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	2303      	movs	r3, #3
 8000c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c0e:	2328      	movs	r3, #40	; 0x28
 8000c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 febc 	bl	80029a8 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c36:	f000 f82e 	bl	8000c96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c52:	2107      	movs	r1, #7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f9bf 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c60:	f000 f819 	bl	8000c96 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000c64:	f241 0345 	movw	r3, #4165	; 0x1045
 8000c68:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fbc2 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c8a:	f000 f804 	bl	8000c96 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	37a0      	adds	r7, #160	; 0xa0
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_SPI1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cda:	2218      	movs	r2, #24
 8000cdc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_SPI1_Init+0x74>)
 8000d04:	f002 fdcc 	bl	80038a0 <HAL_SPI_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f7ff ffc2 	bl	8000c96 <Error_Handler>
  }

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000013c 	.word	0x2000013c
 8000d1c:	40013000 	.word	0x40013000

08000d20 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_SPI2_Init+0x78>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d56:	2218      	movs	r2, #24
 8000d58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_SPI2_Init+0x74>)
 8000d80:	f002 fd8e 	bl	80038a0 <HAL_SPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d8a:	f7ff ff84 	bl	8000c96 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000d8 	.word	0x200000d8
 8000d98:	40003800 	.word	0x40003800

08000d9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_SPI_MspInit+0xdc>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d129      	bne.n	8000e12 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	4a2e      	ldr	r2, [pc, #184]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF2CLK_Pin|RF2MISO_Pin|RF2MOSI_Pin;
 8000dee:	23e0      	movs	r3, #224	; 0xe0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 ff84 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e10:	e02d      	b.n	8000e6e <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_SPI_MspInit+0xe4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d128      	bne.n	8000e6e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6593      	str	r3, [r2, #88]	; 0x58
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_SPI_MspInit+0xe0>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RF1MISO_Pin|RF1CLK_Pin|RF1MOSI_Pin;
 8000e4c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_SPI_MspInit+0xe8>)
 8000e6a:	f000 ff55 	bl	8001d18 <HAL_GPIO_Init>
}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40003800 	.word	0x40003800
 8000e84:	48000400 	.word	0x48000400

08000e88 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8000e92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e96:	6093      	str	r3, [r2, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x44>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000ede:	f7ff ffd3 	bl	8000e88 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 fbfe 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <SystemInit+0x28>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <SystemInit+0x28>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SystemInit+0x28>)
 8000f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f66:	609a      	str	r2, [r3, #8]
#endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8000fb2:	4b3f      	ldr	r3, [pc, #252]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fb4:	2277      	movs	r2, #119	; 0x77
 8000fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fc0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000fc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd2:	4837      	ldr	r0, [pc, #220]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000fd4:	f002 fcf6 	bl	80039c4 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f7ff fe5a 	bl	8000c96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <MX_TIM2_Init+0x138>)
 8000ff0:	f002 fec0 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ffa:	f7ff fe4c 	bl	8000c96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ffe:	482c      	ldr	r0, [pc, #176]	; (80010b0 <MX_TIM2_Init+0x138>)
 8001000:	f002 fd0b 	bl	8003a1a <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800100a:	f7ff fe44 	bl	8000c96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4824      	ldr	r0, [pc, #144]	; (80010b0 <MX_TIM2_Init+0x138>)
 800101e:	f003 fc2d 	bl	800487c <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001028:	f7ff fe35 	bl	8000c96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 255;
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001038:	2304      	movs	r3, #4
 800103a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	481b      	ldr	r0, [pc, #108]	; (80010b0 <MX_TIM2_Init+0x138>)
 8001044:	f002 fd7e 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800104e:	f7ff fe22 	bl	8000c96 <Error_Handler>
  }
  sConfigOC.Pulse = 255;
 8001052:	23ff      	movs	r3, #255	; 0xff
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	2204      	movs	r2, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4814      	ldr	r0, [pc, #80]	; (80010b0 <MX_TIM2_Init+0x138>)
 800105e:	f002 fd71 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001068:	f7ff fe15 	bl	8000c96 <Error_Handler>
  }
  sConfigOC.Pulse = 255;
 800106c:	23ff      	movs	r3, #255	; 0xff
 800106e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2208      	movs	r2, #8
 8001074:	4619      	mov	r1, r3
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_TIM2_Init+0x138>)
 8001078:	f002 fd64 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8001082:	f7ff fe08 	bl	8000c96 <Error_Handler>
  }
  sConfigOC.Pulse = 255;
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	220c      	movs	r2, #12
 800108e:	4619      	mov	r1, r3
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM2_Init+0x138>)
 8001092:	f002 fd57 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x128>
  {
    Error_Handler();
 800109c:	f7ff fdfb 	bl	8000c96 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM2_Init+0x138>)
 80010a2:	f000 f8fd 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 80010a6:	bf00      	nop
 80010a8:	3738      	adds	r7, #56	; 0x38
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001e0 	.word	0x200001e0

080010b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <MX_TIM5_Init+0x17c>)
 80010e8:	4a52      	ldr	r2, [pc, #328]	; (8001234 <MX_TIM5_Init+0x180>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ec:	4b50      	ldr	r3, [pc, #320]	; (8001230 <MX_TIM5_Init+0x17c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_TIM5_Init+0x17c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2399999;
 80010f8:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <MX_TIM5_Init+0x17c>)
 80010fa:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <MX_TIM5_Init+0x184>)
 80010fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800110a:	4849      	ldr	r0, [pc, #292]	; (8001230 <MX_TIM5_Init+0x17c>)
 800110c:	f002 fc5a 	bl	80039c4 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001116:	f7ff fdbe 	bl	8000c96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001124:	4619      	mov	r1, r3
 8001126:	4842      	ldr	r0, [pc, #264]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001128:	f002 fe24 	bl	8003d74 <HAL_TIM_ConfigClockSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001132:	f7ff fdb0 	bl	8000c96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001136:	483e      	ldr	r0, [pc, #248]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001138:	f002 fc6f 	bl	8003a1a <HAL_TIM_PWM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001142:	f7ff fda8 	bl	8000c96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001156:	f003 fb91 	bl	800487c <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001160:	f7ff fd99 	bl	8000c96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001164:	2360      	movs	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25500;
 8001168:	f246 339c 	movw	r3, #25500	; 0x639c
 800116c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001172:	2304      	movs	r3, #4
 8001174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_TIM5_Init+0x17c>)
 800117e:	f002 fce1 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001188:	f7ff fd85 	bl	8000c96 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <MX_TIM5_Init+0x17c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0208 	bic.w	r2, r2, #8
 800119a:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 25500;
 800119c:	f246 339c 	movw	r3, #25500	; 0x639c
 80011a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011aa:	f002 fccb 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 80011b4:	f7ff fd6f 	bl	8000c96 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_2);
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011c6:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 25500;
 80011c8:	f246 339c 	movw	r3, #25500	; 0x639c
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2208      	movs	r2, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011d6:	f002 fcb5 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM5_Init+0x130>
  {
    Error_Handler();
 80011e0:	f7ff fd59 	bl	8000c96 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_3);
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_TIM5_Init+0x17c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0208 	bic.w	r2, r2, #8
 80011f2:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 25500;
 80011f4:	f246 339c 	movw	r3, #25500	; 0x639c
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	220c      	movs	r2, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001202:	f002 fc9f 	bl	8003b44 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM5_Init+0x15c>
  {
    Error_Handler();
 800120c:	f7ff fd43 	bl	8000c96 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_4);
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	69da      	ldr	r2, [r3, #28]
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800121e:	61da      	str	r2, [r3, #28]
  HAL_TIM_MspPostInit(&htim5);
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM5_Init+0x17c>)
 8001222:	f000 f83d 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8001226:	bf00      	nop
 8001228:	3738      	adds	r7, #56	; 0x38
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001a0 	.word	0x200001a0
 8001234:	40000c00 	.word	0x40000c00
 8001238:	00249eff 	.word	0x00249eff

0800123c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124c:	d10c      	bne.n	8001268 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6593      	str	r3, [r2, #88]	; 0x58
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001266:	e010      	b.n	800128a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM5)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_TIM_Base_MspInit+0x60>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10b      	bne.n	800128a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_TIM_Base_MspInit+0x5c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40000c00 	.word	0x40000c00

080012a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d13a      	bne.n	8001338 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
    PD6     ------> TIM2_CH4
    PD4     ------> TIM2_CH2
    PD7     ------> TIM2_CH3
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM3_Pin|PWM2_Pin;
 80012f2:	23d0      	movs	r3, #208	; 0xd0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001302:	2302      	movs	r3, #2
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	483b      	ldr	r0, [pc, #236]	; (80013fc <HAL_TIM_MspPostInit+0x15c>)
 800130e:	f000 fd03 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM5_Pin;
 8001312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001324:	2301      	movs	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM5_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f000 fcf1 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001336:	e05b      	b.n	80013f0 <HAL_TIM_MspPostInit+0x150>
  else if(timHandle->Instance==TIM5)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_TIM_MspPostInit+0x160>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d156      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a2c      	ldr	r2, [pc, #176]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_Pin;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM4_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <HAL_TIM_MspPostInit+0x164>)
 80013a8:	f000 fcb6 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM6_Pin;
 80013ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80013be:	2306      	movs	r3, #6
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM6_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <HAL_TIM_MspPostInit+0x168>)
 80013ca:	f000 fca5 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM7_Pin|PWM8_Pin;
 80013ce:	2305      	movs	r3, #5
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013de:	2302      	movs	r3, #2
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f000 fc94 	bl	8001d18 <HAL_GPIO_Init>
}
 80013f0:	bf00      	nop
 80013f2:	3730      	adds	r7, #48	; 0x30
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	48000c00 	.word	0x48000c00
 8001400:	40000c00 	.word	0x40000c00
 8001404:	48000800 	.word	0x48000800
 8001408:	48001400 	.word	0x48001400

0800140c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <MX_USART1_UART_Init+0x94>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_USART1_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_USART1_UART_Init+0x90>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_USART1_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001456:	f003 fa77 	bl	8004948 <HAL_UART_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001460:	f7ff fc19 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_USART1_UART_Init+0x90>)
 8001468:	f004 fe71 	bl	800614e <HAL_UARTEx_SetTxFifoThreshold>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001472:	f7ff fc10 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001476:	2100      	movs	r1, #0
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <MX_USART1_UART_Init+0x90>)
 800147a:	f004 fea6 	bl	80061ca <HAL_UARTEx_SetRxFifoThreshold>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001484:	f7ff fc07 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_USART1_UART_Init+0x90>)
 800148a:	f004 fe27 	bl	80060dc <HAL_UARTEx_DisableFifoMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001494:	f7ff fbff 	bl	8000c96 <Error_Handler>
  }

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002ac 	.word	0x200002ac
 80014a0:	40013800 	.word	0x40013800

080014a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_USART3_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ca:	220c      	movs	r2, #12
 80014cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_USART3_UART_Init+0x90>)
 80014ee:	f003 fa7b 	bl	80049e8 <HAL_HalfDuplex_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fbcd 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001500:	f004 fe25 	bl	800614e <HAL_UARTEx_SetTxFifoThreshold>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150a:	f7ff fbc4 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150e:	2100      	movs	r1, #0
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001512:	f004 fe5a 	bl	80061ca <HAL_UARTEx_SetRxFifoThreshold>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800151c:	f7ff fbbb 	bl	8000c96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_USART3_UART_Init+0x90>)
 8001522:	f004 fddb 	bl	80060dc <HAL_UARTEx_DisableFifoMode>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800152c:	f7ff fbb3 	bl	8000c96 <Error_Handler>
  }

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000220 	.word	0x20000220
 8001538:	40004800 	.word	0x40004800

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_UART_MspInit+0x100>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12a      	bne.n	80015b4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_UART_MspInit+0x104>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	4a37      	ldr	r2, [pc, #220]	; (8001640 <HAL_UART_MspInit+0x104>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6613      	str	r3, [r2, #96]	; 0x60
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_UART_MspInit+0x104>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <HAL_UART_MspInit+0x104>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a31      	ldr	r2, [pc, #196]	; (8001640 <HAL_UART_MspInit+0x104>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_UART_MspInit+0x104>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPSRX_Pin|GPSTX_Pin;
 800158e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a0:	2307      	movs	r3, #7
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f000 fbb3 	bl	8001d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015b2:	e03e      	b.n	8001632 <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART3)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_UART_MspInit+0x108>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d139      	bne.n	8001632 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_UART_MspInit+0x104>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001600:	2307      	movs	r3, #7
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	480f      	ldr	r0, [pc, #60]	; (8001648 <HAL_UART_MspInit+0x10c>)
 800160c:	f000 fb84 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001622:	2307      	movs	r3, #7
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <HAL_UART_MspInit+0x10c>)
 800162e:	f000 fb73 	bl	8001d18 <HAL_GPIO_Init>
}
 8001632:	bf00      	nop
 8001634:	3730      	adds	r7, #48	; 0x30
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013800 	.word	0x40013800
 8001640:	40021000 	.word	0x40021000
 8001644:	40004800 	.word	0x40004800
 8001648:	48000800 	.word	0x48000800

0800164c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800164e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490e      	ldr	r1, [pc, #56]	; (800168c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0b      	ldr	r4, [pc, #44]	; (8001698 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001676:	f7ff fc69 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167a:	f004 fe4d 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167e:	f7ff fa2b 	bl	8000ad8 <main>

08001682 <LoopForever>:

LoopForever:
    b LoopForever
 8001682:	e7fe      	b.n	8001682 <LoopForever>
  ldr   r0, =_estack
 8001684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001690:	080063c0 	.word	0x080063c0
  ldr r2, =_sbss
 8001694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001698:	2000033c 	.word	0x2000033c

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>

0800169e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f93d 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	2000      	movs	r0, #0
 80016b0:	f000 f80e 	bl	80016d0 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	e001      	b.n	80016c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff fbf2 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c4:	79fb      	ldrb	r3, [r7, #7]

}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_InitTick+0x68>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d022      	beq.n	800172a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_InitTick+0x6c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_InitTick+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f93a 	bl	8001972 <HAL_SYSTICK_Config>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10f      	bne.n	8001724 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d809      	bhi.n	800171e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170a:	2200      	movs	r2, #0
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	f04f 30ff 	mov.w	r0, #4294967295
 8001712:	f000 f914 	bl	800193e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_InitTick+0x70>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e007      	b.n	800172e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e004      	b.n	800172e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e001      	b.n	800172e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000008 	.word	0x20000008
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4413      	add	r3, r2
 8001752:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x1c>)
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000338 	.word	0x20000338
 8001764:	20000008 	.word	0x20000008

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000338 	.word	0x20000338

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d004      	beq.n	80017a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_Delay+0x40>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a4:	bf00      	nop
 80017a6:	f7ff ffdf 	bl	8001768 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d8f7      	bhi.n	80017a6 <HAL_Delay+0x26>
  {
  }
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff47 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff5e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffb2 	bl	80018e4 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e147      	b.n	8001c2e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fdf4 	bl	80005a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fece 	bl	8001768 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019ce:	e012      	b.n	80019f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019d0:	f7ff feca 	bl	8001768 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e11b      	b.n	8001c2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d0e5      	beq.n	80019d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a14:	f7ff fea8 	bl	8001768 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fea4 	bl	8001768 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2203      	movs	r2, #3
 8001a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0f5      	b.n	8001c2e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0e5      	beq.n	8001a1c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0202 	orr.w	r2, r2, #2
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a74      	ldr	r2, [pc, #464]	; (8001c38 <HAL_FDCAN_Init+0x2ac>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d103      	bne.n	8001a72 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001a6a:	4a74      	ldr	r2, [pc, #464]	; (8001c3c <HAL_FDCAN_Init+0x2b0>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7c1b      	ldrb	r3, [r3, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a88:	619a      	str	r2, [r3, #24]
 8001a8a:	e007      	b.n	8001a9c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a9a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7c5b      	ldrb	r3, [r3, #17]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d108      	bne.n	8001ab6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	e007      	b.n	8001ac6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ac4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c9b      	ldrb	r3, [r3, #18]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e007      	b.n	8001af0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001b14:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0210 	bic.w	r2, r2, #16
 8001b24:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0204 	orr.w	r2, r2, #4
 8001b3c:	619a      	str	r2, [r3, #24]
 8001b3e:	e02c      	b.n	8001b9a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d028      	beq.n	8001b9a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d01c      	beq.n	8001b8a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0210 	orr.w	r2, r2, #16
 8001b6e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d110      	bne.n	8001b9a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699a      	ldr	r2, [r3, #24]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	619a      	str	r2, [r3, #24]
 8001b88:	e007      	b.n	8001b9a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0220 	orr.w	r2, r2, #32
 8001b98:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001baa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bb2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bc2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bc4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bce:	d115      	bne.n	8001bfc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bde:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	3b01      	subs	r3, #1
 8001be6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001bf8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001bfa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f814 	bl	8001c40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40006400 	.word	0x40006400
 8001c3c:	40006500 	.word	0x40006500

08001c40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c48:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001c4a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d103      	bne.n	8001c5e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001c5c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2c      	ldr	r2, [pc, #176]	; (8001d14 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d103      	bne.n	8001c70 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001c6e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c7e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c86:	041a      	lsls	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	061a      	lsls	r2, r3, #24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e005      	b.n	8001cf2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3f3      	bcc.n	8001ce6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	4000a400 	.word	0x4000a400
 8001d10:	40006800 	.word	0x40006800
 8001d14:	40006c00 	.word	0x40006c00

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d26:	e15a      	b.n	8001fde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 814c 	beq.w	8001fd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x38>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b12      	cmp	r3, #18
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	6939      	ldr	r1, [r7, #16]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d00b      	beq.n	8001dec <HAL_GPIO_Init+0xd4>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 0201 	and.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_GPIO_Init+0x2e4>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ece:	d01f      	beq.n	8001f10 <HAL_GPIO_Init+0x1f8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_GPIO_Init+0x2ec>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d019      	beq.n	8001f0c <HAL_GPIO_Init+0x1f4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_GPIO_Init+0x2f0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1f0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_GPIO_Init+0x2f4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2fc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001ef8:	2305      	movs	r3, #5
 8001efa:	e00a      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e008      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f00:	2304      	movs	r3, #4
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1fa>
 8001f10:	2300      	movs	r3, #0
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f22:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_GPIO_Init+0x2e8>)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f54:	4a30      	ldr	r2, [pc, #192]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f84:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_GPIO_Init+0x300>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f ae9d 	bne.w	8001d28 <HAL_GPIO_Init+0x10>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	48000400 	.word	0x48000400
 8002008:	48000800 	.word	0x48000800
 800200c:	48000c00 	.word	0x48000c00
 8002010:	48001000 	.word	0x48001000
 8002014:	48001400 	.word	0x48001400
 8002018:	40010400 	.word	0x40010400

0800201c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
 8002028:	4613      	mov	r3, r2
 800202a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002038:	e002      	b.n	8002040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e081      	b.n	8002162 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fcde 	bl	8000a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	e006      	b.n	80020d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d104      	bne.n	80020e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	ea42 0103 	orr.w	r1, r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	021a      	lsls	r2, r3, #8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	f040 80fd 	bne.w	800238e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_I2C_Mem_Read+0x34>
 800219a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f1      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Mem_Read+0x4e>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e0ea      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021c2:	f7ff fad1 	bl	8001768 <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2319      	movs	r3, #25
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f95b 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d5      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2222      	movs	r2, #34	; 0x22
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a3a      	ldr	r2, [r7, #32]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800220c:	88f8      	ldrh	r0, [r7, #6]
 800220e:	893a      	ldrh	r2, [r7, #8]
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9301      	str	r3, [sp, #4]
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4603      	mov	r3, r0
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f8bf 	bl	80023a0 <I2C_RequestMemoryRead>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0ad      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d90e      	bls.n	800225c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HAL_I2C_Mem_Read+0x22c>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa3d 	bl	80026d4 <I2C_TransferConfig>
 800225a:	e00f      	b.n	800227c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	b2da      	uxtb	r2, r3
 800226c:	8979      	ldrh	r1, [r7, #10]
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_I2C_Mem_Read+0x22c>)
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fa2c 	bl	80026d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f902 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07c      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d034      	beq.n	800233c <HAL_I2C_Mem_Read+0x1d0>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d130      	bne.n	800233c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	2200      	movs	r2, #0
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f8d3 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e04d      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2bff      	cmp	r3, #255	; 0xff
 80022fc:	d90e      	bls.n	800231c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	b2da      	uxtb	r2, r3
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	2300      	movs	r3, #0
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f9dd 	bl	80026d4 <I2C_TransferConfig>
 800231a:	e00f      	b.n	800233c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	b2da      	uxtb	r2, r3
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	2300      	movs	r3, #0
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f9cc 	bl	80026d4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d19a      	bne.n	800227c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f920 	bl	8002590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01a      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_I2C_Mem_Read+0x230>)
 800236e:	400b      	ands	r3, r1
 8002370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	80002400 	.word	0x80002400
 800239c:	fe00e800 	.word	0xfe00e800

080023a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	817b      	strh	r3, [r7, #10]
 80023b2:	460b      	mov	r3, r1
 80023b4:	813b      	strh	r3, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	4b20      	ldr	r3, [pc, #128]	; (8002444 <I2C_RequestMemoryRead+0xa4>)
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f984 	bl	80026d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f89d 	bl	8002510 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e02c      	b.n	800243a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023e6:	893b      	ldrh	r3, [r7, #8]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
 80023f0:	e015      	b.n	800241e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023f2:	893b      	ldrh	r3, [r7, #8]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f883 	bl	8002510 <I2C_WaitOnTXISFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e012      	b.n	800243a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2200      	movs	r2, #0
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f831 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	80002000 	.word	0x80002000

08002448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	d103      	bne.n	8002466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d007      	beq.n	8002484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	619a      	str	r2, [r3, #24]
  }
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a0:	e022      	b.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d01e      	beq.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f95d 	bl	8001768 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d113      	bne.n	80024e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e00f      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	429a      	cmp	r2, r3
 8002504:	d0cd      	beq.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800251c:	e02c      	b.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f870 	bl	8002608 <I2C_IsAcknowledgeFailed>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e02a      	b.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d01e      	beq.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7ff f915 	bl	8001768 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d113      	bne.n	8002578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e007      	b.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d1cb      	bne.n	800251e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259c:	e028      	b.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f830 	bl	8002608 <I2C_IsAcknowledgeFailed>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e026      	b.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff f8d9 	bl	8001768 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d113      	bne.n	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e007      	b.n	8002600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d1cf      	bne.n	800259e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b10      	cmp	r3, #16
 8002620:	d151      	bne.n	80026c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002622:	e022      	b.n	800266a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d01e      	beq.n	800266a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262c:	f7ff f89c 	bl	8001768 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	429a      	cmp	r2, r3
 800263a:	d302      	bcc.n	8002642 <I2C_IsAcknowledgeFailed+0x3a>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d113      	bne.n	800266a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e02e      	b.n	80026c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b20      	cmp	r3, #32
 8002676:	d1d5      	bne.n	8002624 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2220      	movs	r2, #32
 8002686:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7ff fedd 	bl	8002448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800269a:	400b      	ands	r3, r1
 800269c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f043 0204 	orr.w	r2, r3, #4
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	fe00e800 	.word	0xfe00e800

080026d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	460b      	mov	r3, r1
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	4613      	mov	r3, r2
 80026e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	0d5b      	lsrs	r3, r3, #21
 80026f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <I2C_TransferConfig+0x58>)
 80026f6:	430b      	orrs	r3, r1
 80026f8:	43db      	mvns	r3, r3
 80026fa:	ea02 0103 	and.w	r1, r2, r3
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002704:	7a7b      	ldrb	r3, [r7, #9]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	03ff63ff 	.word	0x03ff63ff

08002730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	d138      	bne.n	80027b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002750:	2302      	movs	r3, #2
 8002752:	e032      	b.n	80027ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d139      	bne.n	8002850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e033      	b.n	8002852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2224      	movs	r2, #36	; 0x24
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d141      	bne.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287a:	d131      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800287c:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002882:	4a46      	ldr	r2, [pc, #280]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002888:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002894:	4a41      	ldr	r2, [pc, #260]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800289a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2232      	movs	r2, #50	; 0x32
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	3301      	adds	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028b2:	e002      	b.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ba:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d102      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f2      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d158      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e057      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e6:	4a2d      	ldr	r2, [pc, #180]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028f0:	e04d      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f8:	d141      	bne.n	800297e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d131      	bne.n	800296c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2232      	movs	r2, #50	; 0x32
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800293e:	e002      	b.n	8002946 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3b01      	subs	r3, #1
 8002944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d102      	bne.n	800295a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f2      	bne.n	8002940 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	d112      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e011      	b.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800297c:	e007      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002986:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40007000 	.word	0x40007000
 80029a0:	20000000 	.word	0x20000000
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e308      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c6:	4ba3      	ldr	r3, [pc, #652]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d0:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3e>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b99      	ldr	r3, [pc, #612]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e2e3      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a90      	ldr	r2, [pc, #576]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a8a      	ldr	r2, [pc, #552]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a83      	ldr	r2, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe fe82 	bl	8001768 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe fe7e 	bl	8001768 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2a8      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fe6e 	bl	8001768 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fe6a 	bl	8001768 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e294      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d075      	beq.n	8002baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d102      	bne.n	8002ade <HAL_RCC_OscConfig+0x136>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x13c>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11f      	bne.n	8002b24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x154>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e267      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	4952      	ldr	r1, [pc, #328]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_OscConfig+0x2b0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fddb 	bl	80016d0 <HAL_InitTick>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d043      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e253      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d023      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fe16 	bl	8001768 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fe fe12 	bl	8001768 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e23c      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b52:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4939      	ldr	r1, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e01a      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b74:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a36      	ldr	r2, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fdf2 	bl	8001768 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fdee 	bl	8001768 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e218      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1e0>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe fdcb 	bl	8001768 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7fe fdc7 	bl	8001768 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e1f1      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ef      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
 8002bf6:	e01b      	b.n	8002c30 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fdae 	bl	8001768 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fdaa 	bl	8001768 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1d4      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ef      	bne.n	8002c10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ab 	beq.w	8002d94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2b4>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e005      	b.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4baf      	ldr	r3, [pc, #700]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4aae      	ldr	r2, [pc, #696]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4bac      	ldr	r3, [pc, #688]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7e:	4ba9      	ldr	r3, [pc, #676]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8a:	4ba6      	ldr	r3, [pc, #664]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4aa5      	ldr	r2, [pc, #660]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe fd67 	bl	8001768 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe fd63 	bl	8001768 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e18d      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	; (8002f24 <HAL_RCC_OscConfig+0x57c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x32e>
 8002cc4:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	4a95      	ldr	r2, [pc, #596]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd4:	e024      	b.n	8002d20 <HAL_RCC_OscConfig+0x378>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d110      	bne.n	8002d00 <HAL_RCC_OscConfig+0x358>
 8002cde:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	4a8e      	ldr	r2, [pc, #568]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cee:	4b8c      	ldr	r3, [pc, #560]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	4a8a      	ldr	r2, [pc, #552]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfe:	e00f      	b.n	8002d20 <HAL_RCC_OscConfig+0x378>
 8002d00:	4b87      	ldr	r3, [pc, #540]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	4a86      	ldr	r2, [pc, #536]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d10:	4b83      	ldr	r3, [pc, #524]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	4a82      	ldr	r2, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fd1e 	bl	8001768 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe fd1a 	bl	8001768 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e142      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ed      	beq.n	8002d30 <HAL_RCC_OscConfig+0x388>
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fe fd07 	bl	8001768 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5c:	e00a      	b.n	8002d74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe fd03 	bl	8001768 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e12b      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ed      	bne.n	8002d5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	4a64      	ldr	r2, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002da8:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fcd6 	bl	8001768 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc0:	f7fe fcd2 	bl	8001768 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0fc      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dd2:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x418>
 8002de0:	e01b      	b.n	8002e1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de2:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de8:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe fcb9 	bl	8001768 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfa:	f7fe fcb5 	bl	8001768 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0df      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ef      	bne.n	8002dfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80d3 	beq.w	8002fca <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	f000 808d 	beq.w	8002f4c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d15a      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a38      	ldr	r2, [pc, #224]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fc8f 	bl	8001768 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fc8b 	bl	8001768 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0b5      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x580>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a11      	ldr	r1, [r2, #32]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e86:	0212      	lsls	r2, r2, #8
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e8e:	0852      	lsrs	r2, r2, #1
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0552      	lsls	r2, r2, #21
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0652      	lsls	r2, r2, #25
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ea6:	06d2      	lsls	r2, r2, #27
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	491d      	ldr	r1, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fc4e 	bl	8001768 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fc4a 	bl	8001768 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e074      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x528>
 8002eee:	e06c      	b.n	8002fca <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x578>)
 8002f0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fc26 	bl	8001768 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1e:	e00e      	b.n	8002f3e <HAL_RCC_OscConfig+0x596>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fc1c 	bl	8001768 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e046      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3e:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_OscConfig+0x62c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x584>
 8002f4a:	e03e      	b.n	8002fca <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e039      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_OscConfig+0x62c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0203 	and.w	r2, r3, #3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d12c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d123      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d113      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d109      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e11e      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d910      	bls.n	8003020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b8e      	ldr	r3, [pc, #568]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 020f 	bic.w	r2, r3, #15
 8003006:	498c      	ldr	r1, [pc, #560]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b8a      	ldr	r3, [pc, #552]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e106      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d073      	beq.n	8003114 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d129      	bne.n	8003088 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003034:	4b81      	ldr	r3, [pc, #516]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0f4      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003044:	f000 f99c 	bl	8003380 <RCC_GetSysClockFreqFromPLLSource>
 8003048:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4a7c      	ldr	r2, [pc, #496]	; (8003240 <HAL_RCC_ClockConfig+0x268>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d93f      	bls.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003052:	4b7a      	ldr	r3, [pc, #488]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003066:	2b00      	cmp	r3, #0
 8003068:	d033      	beq.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12f      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003072:	4b72      	ldr	r3, [pc, #456]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307a:	4a70      	ldr	r2, [pc, #448]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 800307c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003080:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e024      	b.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003090:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0c6      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0be      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030b0:	f000 f8ce 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4a61      	ldr	r2, [pc, #388]	; (8003240 <HAL_RCC_ClockConfig+0x268>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d909      	bls.n	80030d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	4a5d      	ldr	r2, [pc, #372]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80030c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b5a      	ldr	r3, [pc, #360]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4957      	ldr	r1, [pc, #348]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe fb40 	bl	8001768 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fe fb3c 	bl	8001768 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e095      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b43      	ldr	r3, [pc, #268]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a42      	ldr	r2, [pc, #264]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003136:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800314c:	4a3b      	ldr	r2, [pc, #236]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 800314e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4936      	ldr	r1, [pc, #216]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
 8003166:	e008      	b.n	800317a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d105      	bne.n	800317a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4a32      	ldr	r2, [pc, #200]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 8003174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003178:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d21d      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 020f 	bic.w	r2, r3, #15
 8003190:	4929      	ldr	r1, [pc, #164]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003198:	f7fe fae6 	bl	8001768 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fe fae2 	bl	8001768 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e03b      	b.n	800322e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_RCC_ClockConfig+0x260>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1ed      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4917      	ldr	r1, [pc, #92]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490f      	ldr	r1, [pc, #60]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003202:	f000 f825 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_RCC_ClockConfig+0x264>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_ClockConfig+0x26c>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	fa21 f303 	lsr.w	r3, r1, r3
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x270>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fa52 	bl	80016d0 <HAL_InitTick>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	04c4b400 	.word	0x04c4b400
 8003244:	08006398 	.word	0x08006398
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b04      	cmp	r3, #4
 8003260:	d102      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	e047      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d102      	bne.n	800327a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e03e      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d136      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3301      	adds	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ae:	68d2      	ldr	r2, [r2, #12]
 80032b0:	0a12      	lsrs	r2, r2, #8
 80032b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
      break;
 80032bc:	e00c      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c8:	68d2      	ldr	r2, [r2, #12]
 80032ca:	0a12      	lsrs	r2, r2, #8
 80032cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
      break;
 80032d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0e5b      	lsrs	r3, r3, #25
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e001      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032f8:	693b      	ldr	r3, [r7, #16]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	00f42400 	.word	0x00f42400

08003310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_GetHCLKFreq+0x14>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000000 	.word	0x20000000

08003328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800332c:	f7ff fff0 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003330:	4601      	mov	r1, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	080063a8 	.word	0x080063a8

08003354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003358:	f7ff ffda 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 800335c:	4601      	mov	r1, r0
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_RCC_GetPCLK2Freq+0x28>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	080063a8 	.word	0x080063a8

08003380 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3301      	adds	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d10c      	bne.n	80033be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033a4:	4a17      	ldr	r2, [pc, #92]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4a14      	ldr	r2, [pc, #80]	; (8003400 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	0a12      	lsrs	r2, r2, #8
 80033b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	617b      	str	r3, [r7, #20]
    break;
 80033bc:	e00c      	b.n	80033d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	0a12      	lsrs	r2, r2, #8
 80033cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033d0:	fb02 f303 	mul.w	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    break;
 80033d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0e5b      	lsrs	r3, r3, #25
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	3301      	adds	r3, #1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80033f2:	687b      	ldr	r3, [r7, #4]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40021000 	.word	0x40021000
 8003404:	00f42400 	.word	0x00f42400

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003410:	2300      	movs	r3, #0
 8003412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003414:	2300      	movs	r3, #0
 8003416:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8098 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b43      	ldr	r3, [pc, #268]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	4a3f      	ldr	r2, [pc, #252]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	; 0x58
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a39      	ldr	r2, [pc, #228]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800345e:	f7fe f983 	bl	8001768 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003464:	e009      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe f97f 	bl	8001768 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	74fb      	strb	r3, [r7, #19]
        break;
 8003478:	e005      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800347a:	4b30      	ldr	r3, [pc, #192]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ef      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d159      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01e      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d019      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034c4:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ca:	4a1b      	ldr	r2, [pc, #108]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe f93f 	bl	8001768 <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ec:	e00b      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe f93b 	bl	8001768 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d902      	bls.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	74fb      	strb	r3, [r7, #19]
            break;
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003506:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ec      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	4903      	ldr	r1, [pc, #12]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003532:	7cfb      	ldrb	r3, [r7, #19]
 8003534:	74bb      	strb	r3, [r7, #18]
 8003536:	e005      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4baf      	ldr	r3, [pc, #700]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	4aae      	ldr	r2, [pc, #696]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003562:	4ba9      	ldr	r3, [pc, #676]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	49a5      	ldr	r1, [pc, #660]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003584:	4ba0      	ldr	r3, [pc, #640]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 020c 	bic.w	r2, r3, #12
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	499d      	ldr	r1, [pc, #628]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035a6:	4b98      	ldr	r3, [pc, #608]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4994      	ldr	r1, [pc, #592]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c8:	4b8f      	ldr	r3, [pc, #572]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	498c      	ldr	r1, [pc, #560]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ea:	4b87      	ldr	r3, [pc, #540]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4983      	ldr	r1, [pc, #524]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800360c:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	497b      	ldr	r1, [pc, #492]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4972      	ldr	r1, [pc, #456]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003650:	4b6d      	ldr	r3, [pc, #436]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	496a      	ldr	r1, [pc, #424]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	4961      	ldr	r1, [pc, #388]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003694:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	4959      	ldr	r1, [pc, #356]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4950      	ldr	r1, [pc, #320]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4948      	ldr	r1, [pc, #288]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f6:	d105      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f8:	4b43      	ldr	r3, [pc, #268]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4a42      	ldr	r2, [pc, #264]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003702:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003710:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	493a      	ldr	r1, [pc, #232]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372e:	d105      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b35      	ldr	r3, [pc, #212]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d015      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003748:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	492c      	ldr	r1, [pc, #176]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800376e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003772:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d015      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	491e      	ldr	r1, [pc, #120]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379e:	d105      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037b8:	4b13      	ldr	r3, [pc, #76]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4910      	ldr	r1, [pc, #64]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d6:	d105      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d018      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4902      	ldr	r1, [pc, #8]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003806:	e001      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003808:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003814:	d105      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	4917      	ldr	r1, [pc, #92]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d105      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800386c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	4909      	ldr	r1, [pc, #36]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800388c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003890:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003892:	7cbb      	ldrb	r3, [r7, #18]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e084      	b.n	80039bc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fd fa65 	bl	8000d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f2:	d902      	bls.n	80038fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e002      	b.n	8003900 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003908:	d007      	beq.n	800391a <HAL_SPI_Init+0x7a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003912:	d002      	beq.n	800391a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800392a:	d903      	bls.n	8003934 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
 8003932:	e002      	b.n	800393a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	ea42 0103 	orr.w	r1, r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0204 	and.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e01d      	b.n	8003a12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fc26 	bl	800123c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 faa6 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01d      	b.n	8003a68 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f815 	bl	8003a70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f000 fa7b 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 feca 	bl	8004830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_TIM_PWM_Start+0xa4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d018      	beq.n	8003ad8 <HAL_TIM_PWM_Start+0x54>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <HAL_TIM_PWM_Start+0xa8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <HAL_TIM_PWM_Start+0x54>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <HAL_TIM_PWM_Start+0xac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_TIM_PWM_Start+0x54>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_TIM_PWM_Start+0xb0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_TIM_PWM_Start+0x54>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_TIM_PWM_Start+0xb4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_PWM_Start+0x54>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_TIM_PWM_Start+0xb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_TIM_PWM_Start+0x58>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_TIM_PWM_Start+0x5a>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_TIM_PWM_Start+0xbc>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d00b      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x98>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40015000 	.word	0x40015000
 8003b40:	00010007 	.word	0x00010007

08003b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e105      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x226>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b14      	cmp	r3, #20
 8003b72:	f200 80f0 	bhi.w	8003d56 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bd1 	.word	0x08003bd1
 8003b80:	08003d57 	.word	0x08003d57
 8003b84:	08003d57 	.word	0x08003d57
 8003b88:	08003d57 	.word	0x08003d57
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003d57 	.word	0x08003d57
 8003b94:	08003d57 	.word	0x08003d57
 8003b98:	08003d57 	.word	0x08003d57
 8003b9c:	08003c53 	.word	0x08003c53
 8003ba0:	08003d57 	.word	0x08003d57
 8003ba4:	08003d57 	.word	0x08003d57
 8003ba8:	08003d57 	.word	0x08003d57
 8003bac:	08003c93 	.word	0x08003c93
 8003bb0:	08003d57 	.word	0x08003d57
 8003bb4:	08003d57 	.word	0x08003d57
 8003bb8:	08003d57 	.word	0x08003d57
 8003bbc:	08003cd5 	.word	0x08003cd5
 8003bc0:	08003d57 	.word	0x08003d57
 8003bc4:	08003d57 	.word	0x08003d57
 8003bc8:	08003d57 	.word	0x08003d57
 8003bcc:	08003d15 	.word	0x08003d15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa64 	bl	80040a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	619a      	str	r2, [r3, #24]
      break;
 8003c0e:	e0a3      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fade 	bl	80041d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
      break;
 8003c50:	e082      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fb51 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0208 	orr.w	r2, r2, #8
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0204 	bic.w	r2, r2, #4
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
      break;
 8003c90:	e062      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fbc3 	bl	8004424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	61da      	str	r2, [r3, #28]
      break;
 8003cd2:	e041      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fc36 	bl	800454c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d12:	e021      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fc80 	bl	8004620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003d56:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop

08003d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0d2      	b.n	8003f32 <HAL_TIM_ConfigClockSource+0x1be>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	f000 80a9 	beq.w	8003f1e <HAL_TIM_ConfigClockSource+0x1aa>
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d81a      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x94>
 8003dd2:	2b30      	cmp	r3, #48	; 0x30
 8003dd4:	f000 809a 	beq.w	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d809      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x7c>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	f000 8095 	beq.w	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	f000 8092 	beq.w	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 808f 	beq.w	8003f0c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003dee:	e097      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003df0:	2b50      	cmp	r3, #80	; 0x50
 8003df2:	d05b      	beq.n	8003eac <HAL_TIM_ConfigClockSource+0x138>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d802      	bhi.n	8003dfe <HAL_TIM_ConfigClockSource+0x8a>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d077      	beq.n	8003eec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003dfc:	e090      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003dfe:	2b60      	cmp	r3, #96	; 0x60
 8003e00:	d064      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0x158>
 8003e02:	2b70      	cmp	r3, #112	; 0x70
 8003e04:	d028      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8003e06:	e08b      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003e08:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_TIM_ConfigClockSource+0x1c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d07e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003e0e:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_TIM_ConfigClockSource+0x1c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d810      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0xc2>
 8003e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e18:	d078      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d803      	bhi.n	8003e28 <HAL_TIM_ConfigClockSource+0xb4>
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d02f      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8003e26:	e07b      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003e28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e2c:	d06e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003e2e:	4a44      	ldr	r2, [pc, #272]	; (8003f40 <HAL_TIM_ConfigClockSource+0x1cc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d06b      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003e34:	e074      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003e36:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d067      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003e3c:	4a41      	ldr	r2, [pc, #260]	; (8003f44 <HAL_TIM_ConfigClockSource+0x1d0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d803      	bhi.n	8003e4a <HAL_TIM_ConfigClockSource+0xd6>
 8003e42:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_TIM_ConfigClockSource+0x1d4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d061      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003e48:	e06a      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_TIM_ConfigClockSource+0x1d8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d05d      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
 8003e50:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d05a      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8003e56:	e063      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6899      	ldr	r1, [r3, #8]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f000 fcc2 	bl	80047f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]
      break;
 8003e84:	e04c      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f000 fcab 	bl	80047f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea8:	609a      	str	r2, [r3, #8]
      break;
 8003eaa:	e039      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f000 fc1d 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2150      	movs	r1, #80	; 0x50
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fc76 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8003eca:	e029      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 fc3c 	bl	8004756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2160      	movs	r1, #96	; 0x60
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fc66 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8003eea:	e019      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f000 fbfd 	bl	80046f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fc56 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8003f0a:	e009      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 fc4d 	bl	80047b6 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e000      	b.n	8003f20 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8003f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	00100030 	.word	0x00100030
 8003f40:	00100020 	.word	0x00100020
 8003f44:	00100050 	.word	0x00100050
 8003f48:	00100040 	.word	0x00100040
 8003f4c:	00100060 	.word	0x00100060
 8003f50:	00100070 	.word	0x00100070

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a46      	ldr	r2, [pc, #280]	; (8004080 <TIM_Base_SetConfig+0x12c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d017      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d013      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a43      	ldr	r2, [pc, #268]	; (8004084 <TIM_Base_SetConfig+0x130>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00f      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a42      	ldr	r2, [pc, #264]	; (8004088 <TIM_Base_SetConfig+0x134>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <TIM_Base_SetConfig+0x138>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a40      	ldr	r2, [pc, #256]	; (8004090 <TIM_Base_SetConfig+0x13c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_Base_SetConfig+0x48>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3f      	ldr	r2, [pc, #252]	; (8004094 <TIM_Base_SetConfig+0x140>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d108      	bne.n	8003fae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a33      	ldr	r2, [pc, #204]	; (8004080 <TIM_Base_SetConfig+0x12c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d023      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbc:	d01f      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a30      	ldr	r2, [pc, #192]	; (8004084 <TIM_Base_SetConfig+0x130>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01b      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <TIM_Base_SetConfig+0x134>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d017      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2e      	ldr	r2, [pc, #184]	; (800408c <TIM_Base_SetConfig+0x138>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <TIM_Base_SetConfig+0x13c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2d      	ldr	r2, [pc, #180]	; (8004098 <TIM_Base_SetConfig+0x144>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <TIM_Base_SetConfig+0x148>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <TIM_Base_SetConfig+0x14c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0xaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0x140>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <TIM_Base_SetConfig+0x12c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d013      	beq.n	8004064 <TIM_Base_SetConfig+0x110>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a14      	ldr	r2, [pc, #80]	; (8004090 <TIM_Base_SetConfig+0x13c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00f      	beq.n	8004064 <TIM_Base_SetConfig+0x110>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_Base_SetConfig+0x144>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00b      	beq.n	8004064 <TIM_Base_SetConfig+0x110>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <TIM_Base_SetConfig+0x148>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d007      	beq.n	8004064 <TIM_Base_SetConfig+0x110>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <TIM_Base_SetConfig+0x14c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0x110>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <TIM_Base_SetConfig+0x140>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	615a      	str	r2, [r3, #20]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800
 800408c:	40000c00 	.word	0x40000c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40015000 	.word	0x40015000
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <TIM_OC1_SetConfig+0x11c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_OC1_SetConfig+0x88>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <TIM_OC1_SetConfig+0x120>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00f      	beq.n	800412c <TIM_OC1_SetConfig+0x88>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a2e      	ldr	r2, [pc, #184]	; (80041c8 <TIM_OC1_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_OC1_SetConfig+0x88>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <TIM_OC1_SetConfig+0x128>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_OC1_SetConfig+0x88>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <TIM_OC1_SetConfig+0x12c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC1_SetConfig+0x88>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a2b      	ldr	r2, [pc, #172]	; (80041d4 <TIM_OC1_SetConfig+0x130>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10c      	bne.n	8004146 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0308 	bic.w	r3, r3, #8
 8004132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <TIM_OC1_SetConfig+0x11c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_OC1_SetConfig+0xd2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_OC1_SetConfig+0x120>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_OC1_SetConfig+0xd2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <TIM_OC1_SetConfig+0x124>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_OC1_SetConfig+0xd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <TIM_OC1_SetConfig+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_OC1_SetConfig+0xd2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a19      	ldr	r2, [pc, #100]	; (80041d0 <TIM_OC1_SetConfig+0x12c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_OC1_SetConfig+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <TIM_OC1_SetConfig+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d111      	bne.n	800419a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40014400 	.word	0x40014400
 80041d0:	40014800 	.word	0x40014800
 80041d4:	40015000 	.word	0x40015000

080041d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0320 	bic.w	r3, r3, #32
 8004226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <TIM_OC2_SetConfig+0x110>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_OC2_SetConfig+0x74>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a2b      	ldr	r2, [pc, #172]	; (80042ec <TIM_OC2_SetConfig+0x114>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_OC2_SetConfig+0x74>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a2a      	ldr	r2, [pc, #168]	; (80042f0 <TIM_OC2_SetConfig+0x118>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10d      	bne.n	8004268 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004266:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <TIM_OC2_SetConfig+0x110>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <TIM_OC2_SetConfig+0xc0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <TIM_OC2_SetConfig+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00f      	beq.n	8004298 <TIM_OC2_SetConfig+0xc0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <TIM_OC2_SetConfig+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00b      	beq.n	8004298 <TIM_OC2_SetConfig+0xc0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC2_SetConfig+0x120>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d007      	beq.n	8004298 <TIM_OC2_SetConfig+0xc0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <TIM_OC2_SetConfig+0x124>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d003      	beq.n	8004298 <TIM_OC2_SetConfig+0xc0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a17      	ldr	r2, [pc, #92]	; (80042f0 <TIM_OC2_SetConfig+0x118>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d113      	bne.n	80042c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800429e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	621a      	str	r2, [r3, #32]
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40015000 	.word	0x40015000
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800434c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2b      	ldr	r2, [pc, #172]	; (800440c <TIM_OC3_SetConfig+0x10c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_OC3_SetConfig+0x72>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <TIM_OC3_SetConfig+0x110>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_OC3_SetConfig+0x72>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a29      	ldr	r2, [pc, #164]	; (8004414 <TIM_OC3_SetConfig+0x114>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10d      	bne.n	800438e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1e      	ldr	r2, [pc, #120]	; (800440c <TIM_OC3_SetConfig+0x10c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_OC3_SetConfig+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <TIM_OC3_SetConfig+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_OC3_SetConfig+0xbe>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <TIM_OC3_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_OC3_SetConfig+0xbe>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <TIM_OC3_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_OC3_SetConfig+0xbe>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <TIM_OC3_SetConfig+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_OC3_SetConfig+0xbe>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <TIM_OC3_SetConfig+0x114>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d113      	bne.n	80043e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	371c      	adds	r7, #28
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40013400 	.word	0x40013400
 8004414:	40015000 	.word	0x40015000
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	031b      	lsls	r3, r3, #12
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <TIM_OC4_SetConfig+0x110>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d007      	beq.n	8004498 <TIM_OC4_SetConfig+0x74>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a2b      	ldr	r2, [pc, #172]	; (8004538 <TIM_OC4_SetConfig+0x114>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d003      	beq.n	8004498 <TIM_OC4_SetConfig+0x74>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <TIM_OC4_SetConfig+0x118>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10d      	bne.n	80044b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	031b      	lsls	r3, r3, #12
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <TIM_OC4_SetConfig+0x110>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <TIM_OC4_SetConfig+0xc0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <TIM_OC4_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00f      	beq.n	80044e4 <TIM_OC4_SetConfig+0xc0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <TIM_OC4_SetConfig+0x11c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_OC4_SetConfig+0xc0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <TIM_OC4_SetConfig+0x120>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_OC4_SetConfig+0xc0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a1c      	ldr	r2, [pc, #112]	; (8004548 <TIM_OC4_SetConfig+0x124>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC4_SetConfig+0xc0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <TIM_OC4_SetConfig+0x118>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d113      	bne.n	800450c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40015000 	.word	0x40015000
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a19      	ldr	r2, [pc, #100]	; (8004608 <TIM_OC5_SetConfig+0xbc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_OC5_SetConfig+0x82>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a18      	ldr	r2, [pc, #96]	; (800460c <TIM_OC5_SetConfig+0xc0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_OC5_SetConfig+0x82>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <TIM_OC5_SetConfig+0xc4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_OC5_SetConfig+0x82>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a16      	ldr	r2, [pc, #88]	; (8004614 <TIM_OC5_SetConfig+0xc8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_OC5_SetConfig+0x82>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <TIM_OC5_SetConfig+0xcc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC5_SetConfig+0x82>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC5_SetConfig+0xd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d109      	bne.n	80045e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40013400 	.word	0x40013400
 8004610:	40014000 	.word	0x40014000
 8004614:	40014400 	.word	0x40014400
 8004618:	40014800 	.word	0x40014800
 800461c:	40015000 	.word	0x40015000

08004620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	051b      	lsls	r3, r3, #20
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <TIM_OC6_SetConfig+0xc0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <TIM_OC6_SetConfig+0x84>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <TIM_OC6_SetConfig+0xc4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00f      	beq.n	80046a4 <TIM_OC6_SetConfig+0x84>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <TIM_OC6_SetConfig+0xc8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_OC6_SetConfig+0x84>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <TIM_OC6_SetConfig+0xcc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_OC6_SetConfig+0x84>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <TIM_OC6_SetConfig+0xd0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_OC6_SetConfig+0x84>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <TIM_OC6_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d109      	bne.n	80046b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	029b      	lsls	r3, r3, #10
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00
 80046e4:	40013400 	.word	0x40013400
 80046e8:	40014000 	.word	0x40014000
 80046ec:	40014400 	.word	0x40014400
 80046f0:	40014800 	.word	0x40014800
 80046f4:	40015000 	.word	0x40015000

080046f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 030a 	bic.w	r3, r3, #10
 8004734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 0210 	bic.w	r2, r3, #16
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f043 0307 	orr.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	021a      	lsls	r2, r3, #8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	431a      	orrs	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	fa01 f303 	lsl.w	r3, r1, r3
 8004868:	431a      	orrs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004890:	2302      	movs	r3, #2
 8004892:	e04c      	b.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d108      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004900:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40015000 	.word	0x40015000

08004948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e042      	b.n	80049e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc fde5 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2224      	movs	r2, #36	; 0x24
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f884 	bl	8004a98 <UART_SetConfig>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 fa66 	bl	8005e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 faed 	bl	8005fb8 <UART_CheckIdleState>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e04a      	b.n	8004a90 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fc fd95 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2224      	movs	r2, #36	; 0x24
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f834 	bl	8004a98 <UART_SetConfig>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e02a      	b.n	8004a90 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 fa16 	bl	8005e74 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004a66:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 fa95 	bl	8005fb8 <UART_CheckIdleState>
 8004a8e:	4603      	mov	r3, r0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	4313      	orrs	r3, r2
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4baa      	ldr	r3, [pc, #680]	; (8004d80 <UART_SetConfig+0x2e8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9f      	ldr	r2, [pc, #636]	; (8004d84 <UART_SetConfig+0x2ec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	4313      	orrs	r3, r2
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a90      	ldr	r2, [pc, #576]	; (8004d88 <UART_SetConfig+0x2f0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d126      	bne.n	8004b9a <UART_SetConfig+0x102>
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d81a      	bhi.n	8004b90 <UART_SetConfig+0xf8>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0xc8>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e116      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e112      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e10e      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e10a      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	bf00      	nop
 8004b98:	e105      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7c      	ldr	r2, [pc, #496]	; (8004d90 <UART_SetConfig+0x2f8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d138      	bne.n	8004c16 <UART_SetConfig+0x17e>
 8004ba4:	4b79      	ldr	r3, [pc, #484]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d82c      	bhi.n	8004c0c <UART_SetConfig+0x174>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x120>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e0d8      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e0d4      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e0d0      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e0cc      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	bf00      	nop
 8004c14:	e0c7      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <UART_SetConfig+0x2fc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d125      	bne.n	8004c6c <UART_SetConfig+0x1d4>
 8004c20:	4b5a      	ldr	r3, [pc, #360]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d011      	beq.n	8004c52 <UART_SetConfig+0x1ba>
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d802      	bhi.n	8004c38 <UART_SetConfig+0x1a0>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <UART_SetConfig+0x1aa>
 8004c36:	e014      	b.n	8004c62 <UART_SetConfig+0x1ca>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d006      	beq.n	8004c4a <UART_SetConfig+0x1b2>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d00c      	beq.n	8004c5a <UART_SetConfig+0x1c2>
 8004c40:	e00f      	b.n	8004c62 <UART_SetConfig+0x1ca>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c48:	e0ad      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c50:	e0a9      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c52:	2304      	movs	r3, #4
 8004c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c58:	e0a5      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c60:	e0a1      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c62:	2310      	movs	r3, #16
 8004c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c68:	bf00      	nop
 8004c6a:	e09c      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a49      	ldr	r2, [pc, #292]	; (8004d98 <UART_SetConfig+0x300>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d125      	bne.n	8004cc2 <UART_SetConfig+0x22a>
 8004c76:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d011      	beq.n	8004ca8 <UART_SetConfig+0x210>
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d802      	bhi.n	8004c8e <UART_SetConfig+0x1f6>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <UART_SetConfig+0x200>
 8004c8c:	e014      	b.n	8004cb8 <UART_SetConfig+0x220>
 8004c8e:	2b80      	cmp	r3, #128	; 0x80
 8004c90:	d006      	beq.n	8004ca0 <UART_SetConfig+0x208>
 8004c92:	2bc0      	cmp	r3, #192	; 0xc0
 8004c94:	d00c      	beq.n	8004cb0 <UART_SetConfig+0x218>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x220>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e082      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e07e      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e07a      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e076      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	bf00      	nop
 8004cc0:	e071      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <UART_SetConfig+0x304>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d129      	bne.n	8004d20 <UART_SetConfig+0x288>
 8004ccc:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	d014      	beq.n	8004d06 <UART_SetConfig+0x26e>
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce0:	d802      	bhi.n	8004ce8 <UART_SetConfig+0x250>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <UART_SetConfig+0x25e>
 8004ce6:	e016      	b.n	8004d16 <UART_SetConfig+0x27e>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d007      	beq.n	8004cfe <UART_SetConfig+0x266>
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf2:	d00c      	beq.n	8004d0e <UART_SetConfig+0x276>
 8004cf4:	e00f      	b.n	8004d16 <UART_SetConfig+0x27e>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfc:	e053      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d04:	e04f      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d06:	2304      	movs	r3, #4
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0c:	e04b      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d14:	e047      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d16:	2310      	movs	r3, #16
 8004d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1c:	bf00      	nop
 8004d1e:	e042      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <UART_SetConfig+0x2ec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d13a      	bne.n	8004da0 <UART_SetConfig+0x308>
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d014      	beq.n	8004d64 <UART_SetConfig+0x2cc>
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d802      	bhi.n	8004d46 <UART_SetConfig+0x2ae>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d007      	beq.n	8004d54 <UART_SetConfig+0x2bc>
 8004d44:	e016      	b.n	8004d74 <UART_SetConfig+0x2dc>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4a:	d007      	beq.n	8004d5c <UART_SetConfig+0x2c4>
 8004d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d50:	d00c      	beq.n	8004d6c <UART_SetConfig+0x2d4>
 8004d52:	e00f      	b.n	8004d74 <UART_SetConfig+0x2dc>
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e024      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e020      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e01c      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e018      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	bf00      	nop
 8004d7c:	e013      	b.n	8004da6 <UART_SetConfig+0x30e>
 8004d7e:	bf00      	nop
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	40004c00 	.word	0x40004c00
 8004d9c:	40005000 	.word	0x40005000
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a86      	ldr	r2, [pc, #536]	; (8004fc4 <UART_SetConfig+0x52c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 8422 	bne.w	80055f6 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	f200 8173 	bhi.w	80050a2 <UART_SetConfig+0x60a>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0x32c>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	080050a3 	.word	0x080050a3
 8004dcc:	08004e8b 	.word	0x08004e8b
 8004dd0:	080050a3 	.word	0x080050a3
 8004dd4:	08004f23 	.word	0x08004f23
 8004dd8:	080050a3 	.word	0x080050a3
 8004ddc:	080050a3 	.word	0x080050a3
 8004de0:	080050a3 	.word	0x080050a3
 8004de4:	08004ff5 	.word	0x08004ff5
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004de8:	f7fe fa9e 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d044      	beq.n	8004e80 <UART_SetConfig+0x3e8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d03e      	beq.n	8004e7c <UART_SetConfig+0x3e4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d038      	beq.n	8004e78 <UART_SetConfig+0x3e0>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d032      	beq.n	8004e74 <UART_SetConfig+0x3dc>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d02c      	beq.n	8004e70 <UART_SetConfig+0x3d8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d026      	beq.n	8004e6c <UART_SetConfig+0x3d4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d020      	beq.n	8004e68 <UART_SetConfig+0x3d0>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b07      	cmp	r3, #7
 8004e2c:	d01a      	beq.n	8004e64 <UART_SetConfig+0x3cc>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d014      	beq.n	8004e60 <UART_SetConfig+0x3c8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b09      	cmp	r3, #9
 8004e3c:	d00e      	beq.n	8004e5c <UART_SetConfig+0x3c4>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b0a      	cmp	r3, #10
 8004e44:	d008      	beq.n	8004e58 <UART_SetConfig+0x3c0>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b0b      	cmp	r3, #11
 8004e4c:	d102      	bne.n	8004e54 <UART_SetConfig+0x3bc>
 8004e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e52:	e016      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e014      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	e012      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e5c:	2340      	movs	r3, #64	; 0x40
 8004e5e:	e010      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e60:	2320      	movs	r3, #32
 8004e62:	e00e      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e64:	2310      	movs	r3, #16
 8004e66:	e00c      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	e00a      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e6c:	230a      	movs	r3, #10
 8004e6e:	e008      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e70:	2308      	movs	r3, #8
 8004e72:	e006      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e74:	2306      	movs	r3, #6
 8004e76:	e004      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	e002      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e000      	b.n	8004e82 <UART_SetConfig+0x3ea>
 8004e80:	2301      	movs	r3, #1
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
        break;
 8004e88:	e10e      	b.n	80050a8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d044      	beq.n	8004f1c <UART_SetConfig+0x484>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d03e      	beq.n	8004f18 <UART_SetConfig+0x480>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d038      	beq.n	8004f14 <UART_SetConfig+0x47c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d032      	beq.n	8004f10 <UART_SetConfig+0x478>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d02c      	beq.n	8004f0c <UART_SetConfig+0x474>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d026      	beq.n	8004f08 <UART_SetConfig+0x470>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d020      	beq.n	8004f04 <UART_SetConfig+0x46c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d01a      	beq.n	8004f00 <UART_SetConfig+0x468>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d014      	beq.n	8004efc <UART_SetConfig+0x464>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b09      	cmp	r3, #9
 8004ed8:	d00e      	beq.n	8004ef8 <UART_SetConfig+0x460>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b0a      	cmp	r3, #10
 8004ee0:	d008      	beq.n	8004ef4 <UART_SetConfig+0x45c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b0b      	cmp	r3, #11
 8004ee8:	d102      	bne.n	8004ef0 <UART_SetConfig+0x458>
 8004eea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004eee:	e016      	b.n	8004f1e <UART_SetConfig+0x486>
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <UART_SetConfig+0x530>)
 8004ef2:	e014      	b.n	8004f1e <UART_SetConfig+0x486>
 8004ef4:	4b35      	ldr	r3, [pc, #212]	; (8004fcc <UART_SetConfig+0x534>)
 8004ef6:	e012      	b.n	8004f1e <UART_SetConfig+0x486>
 8004ef8:	4b35      	ldr	r3, [pc, #212]	; (8004fd0 <UART_SetConfig+0x538>)
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x486>
 8004efc:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <UART_SetConfig+0x53c>)
 8004efe:	e00e      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <UART_SetConfig+0x540>)
 8004f02:	e00c      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f04:	4b35      	ldr	r3, [pc, #212]	; (8004fdc <UART_SetConfig+0x544>)
 8004f06:	e00a      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <UART_SetConfig+0x548>)
 8004f0a:	e008      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <UART_SetConfig+0x54c>)
 8004f0e:	e006      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <UART_SetConfig+0x550>)
 8004f12:	e004      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <UART_SetConfig+0x554>)
 8004f16:	e002      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f18:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <UART_SetConfig+0x558>)
 8004f1a:	e000      	b.n	8004f1e <UART_SetConfig+0x486>
 8004f1c:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <UART_SetConfig+0x530>)
 8004f1e:	617b      	str	r3, [r7, #20]
        break;
 8004f20:	e0c2      	b.n	80050a8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004f22:	f7fe f995 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d044      	beq.n	8004fba <UART_SetConfig+0x522>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d03e      	beq.n	8004fb6 <UART_SetConfig+0x51e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d038      	beq.n	8004fb2 <UART_SetConfig+0x51a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d032      	beq.n	8004fae <UART_SetConfig+0x516>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d02c      	beq.n	8004faa <UART_SetConfig+0x512>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	d026      	beq.n	8004fa6 <UART_SetConfig+0x50e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d020      	beq.n	8004fa2 <UART_SetConfig+0x50a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b07      	cmp	r3, #7
 8004f66:	d01a      	beq.n	8004f9e <UART_SetConfig+0x506>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d014      	beq.n	8004f9a <UART_SetConfig+0x502>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b09      	cmp	r3, #9
 8004f76:	d00e      	beq.n	8004f96 <UART_SetConfig+0x4fe>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b0a      	cmp	r3, #10
 8004f7e:	d008      	beq.n	8004f92 <UART_SetConfig+0x4fa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b0b      	cmp	r3, #11
 8004f86:	d102      	bne.n	8004f8e <UART_SetConfig+0x4f6>
 8004f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f8c:	e016      	b.n	8004fbc <UART_SetConfig+0x524>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e014      	b.n	8004fbc <UART_SetConfig+0x524>
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	e012      	b.n	8004fbc <UART_SetConfig+0x524>
 8004f96:	2340      	movs	r3, #64	; 0x40
 8004f98:	e010      	b.n	8004fbc <UART_SetConfig+0x524>
 8004f9a:	2320      	movs	r3, #32
 8004f9c:	e00e      	b.n	8004fbc <UART_SetConfig+0x524>
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	e00c      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	e00a      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fa6:	230a      	movs	r3, #10
 8004fa8:	e008      	b.n	8004fbc <UART_SetConfig+0x524>
 8004faa:	2308      	movs	r3, #8
 8004fac:	e006      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fae:	2306      	movs	r3, #6
 8004fb0:	e004      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e002      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e000      	b.n	8004fbc <UART_SetConfig+0x524>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]
        break;
 8004fc2:	e071      	b.n	80050a8 <UART_SetConfig+0x610>
 8004fc4:	40008000 	.word	0x40008000
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	0001e848 	.word	0x0001e848
 8004fd0:	0003d090 	.word	0x0003d090
 8004fd4:	0007a120 	.word	0x0007a120
 8004fd8:	000f4240 	.word	0x000f4240
 8004fdc:	00145855 	.word	0x00145855
 8004fe0:	00186a00 	.word	0x00186a00
 8004fe4:	001e8480 	.word	0x001e8480
 8004fe8:	0028b0aa 	.word	0x0028b0aa
 8004fec:	003d0900 	.word	0x003d0900
 8004ff0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d04e      	beq.n	800509a <UART_SetConfig+0x602>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d047      	beq.n	8005094 <UART_SetConfig+0x5fc>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b02      	cmp	r3, #2
 800500a:	d040      	beq.n	800508e <UART_SetConfig+0x5f6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b03      	cmp	r3, #3
 8005012:	d039      	beq.n	8005088 <UART_SetConfig+0x5f0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b04      	cmp	r3, #4
 800501a:	d032      	beq.n	8005082 <UART_SetConfig+0x5ea>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b05      	cmp	r3, #5
 8005022:	d02b      	beq.n	800507c <UART_SetConfig+0x5e4>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b06      	cmp	r3, #6
 800502a:	d024      	beq.n	8005076 <UART_SetConfig+0x5de>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b07      	cmp	r3, #7
 8005032:	d01d      	beq.n	8005070 <UART_SetConfig+0x5d8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b08      	cmp	r3, #8
 800503a:	d016      	beq.n	800506a <UART_SetConfig+0x5d2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b09      	cmp	r3, #9
 8005042:	d00f      	beq.n	8005064 <UART_SetConfig+0x5cc>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d008      	beq.n	800505e <UART_SetConfig+0x5c6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b0b      	cmp	r3, #11
 8005052:	d101      	bne.n	8005058 <UART_SetConfig+0x5c0>
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	e022      	b.n	800509e <UART_SetConfig+0x606>
 8005058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505c:	e01f      	b.n	800509e <UART_SetConfig+0x606>
 800505e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005062:	e01c      	b.n	800509e <UART_SetConfig+0x606>
 8005064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005068:	e019      	b.n	800509e <UART_SetConfig+0x606>
 800506a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800506e:	e016      	b.n	800509e <UART_SetConfig+0x606>
 8005070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005074:	e013      	b.n	800509e <UART_SetConfig+0x606>
 8005076:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800507a:	e010      	b.n	800509e <UART_SetConfig+0x606>
 800507c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x606>
 8005082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005086:	e00a      	b.n	800509e <UART_SetConfig+0x606>
 8005088:	f241 5355 	movw	r3, #5461	; 0x1555
 800508c:	e007      	b.n	800509e <UART_SetConfig+0x606>
 800508e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005092:	e004      	b.n	800509e <UART_SetConfig+0x606>
 8005094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005098:	e001      	b.n	800509e <UART_SetConfig+0x606>
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	617b      	str	r3, [r7, #20]
        break;
 80050a0:	e002      	b.n	80050a8 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	76fb      	strb	r3, [r7, #27]
        break;
 80050a6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 86b7 	beq.w	8005e1e <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d305      	bcc.n	80050cc <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d903      	bls.n	80050d4 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	76fb      	strb	r3, [r7, #27]
 80050d0:	f000 bea5 	b.w	8005e1e <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 80050d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050d8:	2b08      	cmp	r3, #8
 80050da:	f200 8277 	bhi.w	80055cc <UART_SetConfig+0xb34>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x64c>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005109 	.word	0x08005109
 80050e8:	080055cd 	.word	0x080055cd
 80050ec:	08005247 	.word	0x08005247
 80050f0:	080055cd 	.word	0x080055cd
 80050f4:	0800533d 	.word	0x0800533d
 80050f8:	080055cd 	.word	0x080055cd
 80050fc:	080055cd 	.word	0x080055cd
 8005100:	080055cd 	.word	0x080055cd
 8005104:	0800547b 	.word	0x0800547b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005108:	f7fe f90e 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 800510c:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4618      	mov	r0, r3
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d067      	beq.n	80051ee <UART_SetConfig+0x756>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b01      	cmp	r3, #1
 8005124:	d05e      	beq.n	80051e4 <UART_SetConfig+0x74c>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b02      	cmp	r3, #2
 800512c:	d055      	beq.n	80051da <UART_SetConfig+0x742>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b03      	cmp	r3, #3
 8005134:	d04c      	beq.n	80051d0 <UART_SetConfig+0x738>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b04      	cmp	r3, #4
 800513c:	d043      	beq.n	80051c6 <UART_SetConfig+0x72e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b05      	cmp	r3, #5
 8005144:	d03a      	beq.n	80051bc <UART_SetConfig+0x724>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b06      	cmp	r3, #6
 800514c:	d031      	beq.n	80051b2 <UART_SetConfig+0x71a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b07      	cmp	r3, #7
 8005154:	d028      	beq.n	80051a8 <UART_SetConfig+0x710>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b08      	cmp	r3, #8
 800515c:	d01f      	beq.n	800519e <UART_SetConfig+0x706>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b09      	cmp	r3, #9
 8005164:	d016      	beq.n	8005194 <UART_SetConfig+0x6fc>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b0a      	cmp	r3, #10
 800516c:	d00d      	beq.n	800518a <UART_SetConfig+0x6f2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b0b      	cmp	r3, #11
 8005174:	d104      	bne.n	8005180 <UART_SetConfig+0x6e8>
 8005176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	e03a      	b.n	80051f6 <UART_SetConfig+0x75e>
 8005180:	f04f 0301 	mov.w	r3, #1
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	e035      	b.n	80051f6 <UART_SetConfig+0x75e>
 800518a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800518e:	f04f 0400 	mov.w	r4, #0
 8005192:	e030      	b.n	80051f6 <UART_SetConfig+0x75e>
 8005194:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	e02b      	b.n	80051f6 <UART_SetConfig+0x75e>
 800519e:	f04f 0320 	mov.w	r3, #32
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e026      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051a8:	f04f 0310 	mov.w	r3, #16
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	e021      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051b2:	f04f 030c 	mov.w	r3, #12
 80051b6:	f04f 0400 	mov.w	r4, #0
 80051ba:	e01c      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051bc:	f04f 030a 	mov.w	r3, #10
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	e017      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051c6:	f04f 0308 	mov.w	r3, #8
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	e012      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051d0:	f04f 0306 	mov.w	r3, #6
 80051d4:	f04f 0400 	mov.w	r4, #0
 80051d8:	e00d      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051da:	f04f 0304 	mov.w	r3, #4
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	e008      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051e4:	f04f 0302 	mov.w	r3, #2
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e003      	b.n	80051f6 <UART_SetConfig+0x75e>
 80051ee:	f04f 0301 	mov.w	r3, #1
 80051f2:	f04f 0400 	mov.w	r4, #0
 80051f6:	461a      	mov	r2, r3
 80051f8:	4623      	mov	r3, r4
 80051fa:	f7fb f80d 	bl	8000218 <__aeabi_uldivmod>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	4619      	mov	r1, r3
 8005204:	4622      	mov	r2, r4
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	0214      	lsls	r4, r2, #8
 8005210:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005214:	020b      	lsls	r3, r1, #8
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6852      	ldr	r2, [r2, #4]
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	4611      	mov	r1, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	eb13 0b01 	adds.w	fp, r3, r1
 8005226:	eb44 0c02 	adc.w	ip, r4, r2
 800522a:	4658      	mov	r0, fp
 800522c:	4661      	mov	r1, ip
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f04f 0400 	mov.w	r4, #0
 8005236:	461a      	mov	r2, r3
 8005238:	4623      	mov	r3, r4
 800523a:	f7fa ffed 	bl	8000218 <__aeabi_uldivmod>
 800523e:	4603      	mov	r3, r0
 8005240:	460c      	mov	r4, r1
 8005242:	61fb      	str	r3, [r7, #28]
            break;
 8005244:	e1c5      	b.n	80055d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d05b      	beq.n	8005306 <UART_SetConfig+0x86e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b01      	cmp	r3, #1
 8005254:	d053      	beq.n	80052fe <UART_SetConfig+0x866>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b02      	cmp	r3, #2
 800525c:	d04b      	beq.n	80052f6 <UART_SetConfig+0x85e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b03      	cmp	r3, #3
 8005264:	d043      	beq.n	80052ee <UART_SetConfig+0x856>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b04      	cmp	r3, #4
 800526c:	d03b      	beq.n	80052e6 <UART_SetConfig+0x84e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b05      	cmp	r3, #5
 8005274:	d033      	beq.n	80052de <UART_SetConfig+0x846>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b06      	cmp	r3, #6
 800527c:	d02b      	beq.n	80052d6 <UART_SetConfig+0x83e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b07      	cmp	r3, #7
 8005284:	d023      	beq.n	80052ce <UART_SetConfig+0x836>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b08      	cmp	r3, #8
 800528c:	d01b      	beq.n	80052c6 <UART_SetConfig+0x82e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b09      	cmp	r3, #9
 8005294:	d013      	beq.n	80052be <UART_SetConfig+0x826>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b0a      	cmp	r3, #10
 800529c:	d00b      	beq.n	80052b6 <UART_SetConfig+0x81e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b0b      	cmp	r3, #11
 80052a4:	d103      	bne.n	80052ae <UART_SetConfig+0x816>
 80052a6:	4bae      	ldr	r3, [pc, #696]	; (8005560 <UART_SetConfig+0xac8>)
 80052a8:	f04f 0400 	mov.w	r4, #0
 80052ac:	e02e      	b.n	800530c <UART_SetConfig+0x874>
 80052ae:	4bad      	ldr	r3, [pc, #692]	; (8005564 <UART_SetConfig+0xacc>)
 80052b0:	f04f 0400 	mov.w	r4, #0
 80052b4:	e02a      	b.n	800530c <UART_SetConfig+0x874>
 80052b6:	4bac      	ldr	r3, [pc, #688]	; (8005568 <UART_SetConfig+0xad0>)
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e026      	b.n	800530c <UART_SetConfig+0x874>
 80052be:	4bab      	ldr	r3, [pc, #684]	; (800556c <UART_SetConfig+0xad4>)
 80052c0:	f04f 0400 	mov.w	r4, #0
 80052c4:	e022      	b.n	800530c <UART_SetConfig+0x874>
 80052c6:	4baa      	ldr	r3, [pc, #680]	; (8005570 <UART_SetConfig+0xad8>)
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e01e      	b.n	800530c <UART_SetConfig+0x874>
 80052ce:	4ba9      	ldr	r3, [pc, #676]	; (8005574 <UART_SetConfig+0xadc>)
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e01a      	b.n	800530c <UART_SetConfig+0x874>
 80052d6:	a49e      	add	r4, pc, #632	; (adr r4, 8005550 <UART_SetConfig+0xab8>)
 80052d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052dc:	e016      	b.n	800530c <UART_SetConfig+0x874>
 80052de:	4ba6      	ldr	r3, [pc, #664]	; (8005578 <UART_SetConfig+0xae0>)
 80052e0:	f04f 0400 	mov.w	r4, #0
 80052e4:	e012      	b.n	800530c <UART_SetConfig+0x874>
 80052e6:	4ba5      	ldr	r3, [pc, #660]	; (800557c <UART_SetConfig+0xae4>)
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	e00e      	b.n	800530c <UART_SetConfig+0x874>
 80052ee:	a49a      	add	r4, pc, #616	; (adr r4, 8005558 <UART_SetConfig+0xac0>)
 80052f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052f4:	e00a      	b.n	800530c <UART_SetConfig+0x874>
 80052f6:	4ba2      	ldr	r3, [pc, #648]	; (8005580 <UART_SetConfig+0xae8>)
 80052f8:	f04f 0400 	mov.w	r4, #0
 80052fc:	e006      	b.n	800530c <UART_SetConfig+0x874>
 80052fe:	4ba1      	ldr	r3, [pc, #644]	; (8005584 <UART_SetConfig+0xaec>)
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	e002      	b.n	800530c <UART_SetConfig+0x874>
 8005306:	4b97      	ldr	r3, [pc, #604]	; (8005564 <UART_SetConfig+0xacc>)
 8005308:	f04f 0400 	mov.w	r4, #0
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6852      	ldr	r2, [r2, #4]
 8005310:	0852      	lsrs	r2, r2, #1
 8005312:	4611      	mov	r1, r2
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	eb13 0b01 	adds.w	fp, r3, r1
 800531c:	eb44 0c02 	adc.w	ip, r4, r2
 8005320:	4658      	mov	r0, fp
 8005322:	4661      	mov	r1, ip
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	461a      	mov	r2, r3
 800532e:	4623      	mov	r3, r4
 8005330:	f7fa ff72 	bl	8000218 <__aeabi_uldivmod>
 8005334:	4603      	mov	r3, r0
 8005336:	460c      	mov	r4, r1
 8005338:	61fb      	str	r3, [r7, #28]
            break;
 800533a:	e14a      	b.n	80055d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800533c:	f7fd ff88 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8005340:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4618      	mov	r0, r3
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	2b00      	cmp	r3, #0
 8005350:	d067      	beq.n	8005422 <UART_SetConfig+0x98a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	2b01      	cmp	r3, #1
 8005358:	d05e      	beq.n	8005418 <UART_SetConfig+0x980>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b02      	cmp	r3, #2
 8005360:	d055      	beq.n	800540e <UART_SetConfig+0x976>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b03      	cmp	r3, #3
 8005368:	d04c      	beq.n	8005404 <UART_SetConfig+0x96c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b04      	cmp	r3, #4
 8005370:	d043      	beq.n	80053fa <UART_SetConfig+0x962>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	2b05      	cmp	r3, #5
 8005378:	d03a      	beq.n	80053f0 <UART_SetConfig+0x958>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b06      	cmp	r3, #6
 8005380:	d031      	beq.n	80053e6 <UART_SetConfig+0x94e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	2b07      	cmp	r3, #7
 8005388:	d028      	beq.n	80053dc <UART_SetConfig+0x944>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	2b08      	cmp	r3, #8
 8005390:	d01f      	beq.n	80053d2 <UART_SetConfig+0x93a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	2b09      	cmp	r3, #9
 8005398:	d016      	beq.n	80053c8 <UART_SetConfig+0x930>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b0a      	cmp	r3, #10
 80053a0:	d00d      	beq.n	80053be <UART_SetConfig+0x926>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b0b      	cmp	r3, #11
 80053a8:	d104      	bne.n	80053b4 <UART_SetConfig+0x91c>
 80053aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053ae:	f04f 0400 	mov.w	r4, #0
 80053b2:	e03a      	b.n	800542a <UART_SetConfig+0x992>
 80053b4:	f04f 0301 	mov.w	r3, #1
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	e035      	b.n	800542a <UART_SetConfig+0x992>
 80053be:	f04f 0380 	mov.w	r3, #128	; 0x80
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	e030      	b.n	800542a <UART_SetConfig+0x992>
 80053c8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	e02b      	b.n	800542a <UART_SetConfig+0x992>
 80053d2:	f04f 0320 	mov.w	r3, #32
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e026      	b.n	800542a <UART_SetConfig+0x992>
 80053dc:	f04f 0310 	mov.w	r3, #16
 80053e0:	f04f 0400 	mov.w	r4, #0
 80053e4:	e021      	b.n	800542a <UART_SetConfig+0x992>
 80053e6:	f04f 030c 	mov.w	r3, #12
 80053ea:	f04f 0400 	mov.w	r4, #0
 80053ee:	e01c      	b.n	800542a <UART_SetConfig+0x992>
 80053f0:	f04f 030a 	mov.w	r3, #10
 80053f4:	f04f 0400 	mov.w	r4, #0
 80053f8:	e017      	b.n	800542a <UART_SetConfig+0x992>
 80053fa:	f04f 0308 	mov.w	r3, #8
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	e012      	b.n	800542a <UART_SetConfig+0x992>
 8005404:	f04f 0306 	mov.w	r3, #6
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	e00d      	b.n	800542a <UART_SetConfig+0x992>
 800540e:	f04f 0304 	mov.w	r3, #4
 8005412:	f04f 0400 	mov.w	r4, #0
 8005416:	e008      	b.n	800542a <UART_SetConfig+0x992>
 8005418:	f04f 0302 	mov.w	r3, #2
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	e003      	b.n	800542a <UART_SetConfig+0x992>
 8005422:	f04f 0301 	mov.w	r3, #1
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	f7fa fef3 	bl	8000218 <__aeabi_uldivmod>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	4619      	mov	r1, r3
 8005438:	4622      	mov	r2, r4
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f04f 0400 	mov.w	r4, #0
 8005442:	0214      	lsls	r4, r2, #8
 8005444:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005448:	020b      	lsls	r3, r1, #8
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6852      	ldr	r2, [r2, #4]
 800544e:	0852      	lsrs	r2, r2, #1
 8005450:	4611      	mov	r1, r2
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	eb13 0b01 	adds.w	fp, r3, r1
 800545a:	eb44 0c02 	adc.w	ip, r4, r2
 800545e:	4658      	mov	r0, fp
 8005460:	4661      	mov	r1, ip
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f04f 0400 	mov.w	r4, #0
 800546a:	461a      	mov	r2, r3
 800546c:	4623      	mov	r3, r4
 800546e:	f7fa fed3 	bl	8000218 <__aeabi_uldivmod>
 8005472:	4603      	mov	r3, r0
 8005474:	460c      	mov	r4, r1
 8005476:	61fb      	str	r3, [r7, #28]
            break;
 8005478:	e0ab      	b.n	80055d2 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8088 	beq.w	8005594 <UART_SetConfig+0xafc>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b01      	cmp	r3, #1
 800548a:	d05b      	beq.n	8005544 <UART_SetConfig+0xaac>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b02      	cmp	r3, #2
 8005492:	d052      	beq.n	800553a <UART_SetConfig+0xaa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b03      	cmp	r3, #3
 800549a:	d04a      	beq.n	8005532 <UART_SetConfig+0xa9a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d041      	beq.n	8005528 <UART_SetConfig+0xa90>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d039      	beq.n	8005520 <UART_SetConfig+0xa88>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d031      	beq.n	8005518 <UART_SetConfig+0xa80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b07      	cmp	r3, #7
 80054ba:	d028      	beq.n	800550e <UART_SetConfig+0xa76>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d01f      	beq.n	8005504 <UART_SetConfig+0xa6c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b09      	cmp	r3, #9
 80054ca:	d016      	beq.n	80054fa <UART_SetConfig+0xa62>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b0a      	cmp	r3, #10
 80054d2:	d00d      	beq.n	80054f0 <UART_SetConfig+0xa58>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b0b      	cmp	r3, #11
 80054da:	d104      	bne.n	80054e6 <UART_SetConfig+0xa4e>
 80054dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e0:	f04f 0400 	mov.w	r4, #0
 80054e4:	e05a      	b.n	800559c <UART_SetConfig+0xb04>
 80054e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	e055      	b.n	800559c <UART_SetConfig+0xb04>
 80054f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054f4:	f04f 0400 	mov.w	r4, #0
 80054f8:	e050      	b.n	800559c <UART_SetConfig+0xb04>
 80054fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054fe:	f04f 0400 	mov.w	r4, #0
 8005502:	e04b      	b.n	800559c <UART_SetConfig+0xb04>
 8005504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005508:	f04f 0400 	mov.w	r4, #0
 800550c:	e046      	b.n	800559c <UART_SetConfig+0xb04>
 800550e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005512:	f04f 0400 	mov.w	r4, #0
 8005516:	e041      	b.n	800559c <UART_SetConfig+0xb04>
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <UART_SetConfig+0xaf0>)
 800551a:	f04f 0400 	mov.w	r4, #0
 800551e:	e03d      	b.n	800559c <UART_SetConfig+0xb04>
 8005520:	4b1a      	ldr	r3, [pc, #104]	; (800558c <UART_SetConfig+0xaf4>)
 8005522:	f04f 0400 	mov.w	r4, #0
 8005526:	e039      	b.n	800559c <UART_SetConfig+0xb04>
 8005528:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	e034      	b.n	800559c <UART_SetConfig+0xb04>
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <UART_SetConfig+0xaf8>)
 8005534:	f04f 0400 	mov.w	r4, #0
 8005538:	e030      	b.n	800559c <UART_SetConfig+0xb04>
 800553a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800553e:	f04f 0400 	mov.w	r4, #0
 8005542:	e02b      	b.n	800559c <UART_SetConfig+0xb04>
 8005544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	e026      	b.n	800559c <UART_SetConfig+0xb04>
 800554e:	bf00      	nop
 8005550:	14585500 	.word	0x14585500
 8005554:	00000000 	.word	0x00000000
 8005558:	28b0aa00 	.word	0x28b0aa00
 800555c:	00000000 	.word	0x00000000
 8005560:	00f42400 	.word	0x00f42400
 8005564:	f4240000 	.word	0xf4240000
 8005568:	01e84800 	.word	0x01e84800
 800556c:	03d09000 	.word	0x03d09000
 8005570:	07a12000 	.word	0x07a12000
 8005574:	0f424000 	.word	0x0f424000
 8005578:	186a0000 	.word	0x186a0000
 800557c:	1e848000 	.word	0x1e848000
 8005580:	3d090000 	.word	0x3d090000
 8005584:	7a120000 	.word	0x7a120000
 8005588:	000aaa00 	.word	0x000aaa00
 800558c:	000ccc00 	.word	0x000ccc00
 8005590:	00155500 	.word	0x00155500
 8005594:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6852      	ldr	r2, [r2, #4]
 80055a0:	0852      	lsrs	r2, r2, #1
 80055a2:	4611      	mov	r1, r2
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	eb13 0b01 	adds.w	fp, r3, r1
 80055ac:	eb44 0c02 	adc.w	ip, r4, r2
 80055b0:	4658      	mov	r0, fp
 80055b2:	4661      	mov	r1, ip
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f04f 0400 	mov.w	r4, #0
 80055bc:	461a      	mov	r2, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	f7fa fe2a 	bl	8000218 <__aeabi_uldivmod>
 80055c4:	4603      	mov	r3, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	61fb      	str	r3, [r7, #28]
            break;
 80055ca:	e002      	b.n	80055d2 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	76fb      	strb	r3, [r7, #27]
            break;
 80055d0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d8:	d309      	bcc.n	80055ee <UART_SetConfig+0xb56>
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e0:	d205      	bcs.n	80055ee <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	f000 bc18 	b.w	8005e1e <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	f000 bc14 	b.w	8005e1e <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fe:	f040 8204 	bne.w	8005a0a <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8005602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005606:	2b08      	cmp	r3, #8
 8005608:	f200 81df 	bhi.w	80059ca <UART_SetConfig+0xf32>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0xb7c>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005639 	.word	0x08005639
 8005618:	080056f1 	.word	0x080056f1
 800561c:	080057a9 	.word	0x080057a9
 8005620:	080059cb 	.word	0x080059cb
 8005624:	08005851 	.word	0x08005851
 8005628:	080059cb 	.word	0x080059cb
 800562c:	080059cb 	.word	0x080059cb
 8005630:	080059cb 	.word	0x080059cb
 8005634:	08005909 	.word	0x08005909
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fd fe76 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 800563c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	d044      	beq.n	80056d0 <UART_SetConfig+0xc38>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b01      	cmp	r3, #1
 800564c:	d03e      	beq.n	80056cc <UART_SetConfig+0xc34>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b02      	cmp	r3, #2
 8005654:	d038      	beq.n	80056c8 <UART_SetConfig+0xc30>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b03      	cmp	r3, #3
 800565c:	d032      	beq.n	80056c4 <UART_SetConfig+0xc2c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b04      	cmp	r3, #4
 8005664:	d02c      	beq.n	80056c0 <UART_SetConfig+0xc28>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b05      	cmp	r3, #5
 800566c:	d026      	beq.n	80056bc <UART_SetConfig+0xc24>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b06      	cmp	r3, #6
 8005674:	d020      	beq.n	80056b8 <UART_SetConfig+0xc20>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b07      	cmp	r3, #7
 800567c:	d01a      	beq.n	80056b4 <UART_SetConfig+0xc1c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b08      	cmp	r3, #8
 8005684:	d014      	beq.n	80056b0 <UART_SetConfig+0xc18>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	2b09      	cmp	r3, #9
 800568c:	d00e      	beq.n	80056ac <UART_SetConfig+0xc14>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	2b0a      	cmp	r3, #10
 8005694:	d008      	beq.n	80056a8 <UART_SetConfig+0xc10>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b0b      	cmp	r3, #11
 800569c:	d102      	bne.n	80056a4 <UART_SetConfig+0xc0c>
 800569e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a2:	e016      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	e012      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056ac:	2340      	movs	r3, #64	; 0x40
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056b0:	2320      	movs	r3, #32
 80056b2:	e00e      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056b4:	2310      	movs	r3, #16
 80056b6:	e00c      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056b8:	230c      	movs	r3, #12
 80056ba:	e00a      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056bc:	230a      	movs	r3, #10
 80056be:	e008      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056c0:	2308      	movs	r3, #8
 80056c2:	e006      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056c4:	2306      	movs	r3, #6
 80056c6:	e004      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056c8:	2304      	movs	r3, #4
 80056ca:	e002      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e000      	b.n	80056d2 <UART_SetConfig+0xc3a>
 80056d0:	2301      	movs	r3, #1
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	005a      	lsls	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	61fb      	str	r3, [r7, #28]
        break;
 80056ee:	e16f      	b.n	80059d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fd fe30 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 80056f4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d044      	beq.n	8005788 <UART_SetConfig+0xcf0>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	2b01      	cmp	r3, #1
 8005704:	d03e      	beq.n	8005784 <UART_SetConfig+0xcec>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b02      	cmp	r3, #2
 800570c:	d038      	beq.n	8005780 <UART_SetConfig+0xce8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	2b03      	cmp	r3, #3
 8005714:	d032      	beq.n	800577c <UART_SetConfig+0xce4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	2b04      	cmp	r3, #4
 800571c:	d02c      	beq.n	8005778 <UART_SetConfig+0xce0>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b05      	cmp	r3, #5
 8005724:	d026      	beq.n	8005774 <UART_SetConfig+0xcdc>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b06      	cmp	r3, #6
 800572c:	d020      	beq.n	8005770 <UART_SetConfig+0xcd8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	2b07      	cmp	r3, #7
 8005734:	d01a      	beq.n	800576c <UART_SetConfig+0xcd4>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b08      	cmp	r3, #8
 800573c:	d014      	beq.n	8005768 <UART_SetConfig+0xcd0>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b09      	cmp	r3, #9
 8005744:	d00e      	beq.n	8005764 <UART_SetConfig+0xccc>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	2b0a      	cmp	r3, #10
 800574c:	d008      	beq.n	8005760 <UART_SetConfig+0xcc8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b0b      	cmp	r3, #11
 8005754:	d102      	bne.n	800575c <UART_SetConfig+0xcc4>
 8005756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800575a:	e016      	b.n	800578a <UART_SetConfig+0xcf2>
 800575c:	2301      	movs	r3, #1
 800575e:	e014      	b.n	800578a <UART_SetConfig+0xcf2>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	e012      	b.n	800578a <UART_SetConfig+0xcf2>
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	e010      	b.n	800578a <UART_SetConfig+0xcf2>
 8005768:	2320      	movs	r3, #32
 800576a:	e00e      	b.n	800578a <UART_SetConfig+0xcf2>
 800576c:	2310      	movs	r3, #16
 800576e:	e00c      	b.n	800578a <UART_SetConfig+0xcf2>
 8005770:	230c      	movs	r3, #12
 8005772:	e00a      	b.n	800578a <UART_SetConfig+0xcf2>
 8005774:	230a      	movs	r3, #10
 8005776:	e008      	b.n	800578a <UART_SetConfig+0xcf2>
 8005778:	2308      	movs	r3, #8
 800577a:	e006      	b.n	800578a <UART_SetConfig+0xcf2>
 800577c:	2306      	movs	r3, #6
 800577e:	e004      	b.n	800578a <UART_SetConfig+0xcf2>
 8005780:	2304      	movs	r3, #4
 8005782:	e002      	b.n	800578a <UART_SetConfig+0xcf2>
 8005784:	2302      	movs	r3, #2
 8005786:	e000      	b.n	800578a <UART_SetConfig+0xcf2>
 8005788:	2301      	movs	r3, #1
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	005a      	lsls	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	441a      	add	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	61fb      	str	r3, [r7, #28]
        break;
 80057a6:	e113      	b.n	80059d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d043      	beq.n	8005838 <UART_SetConfig+0xda0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d03d      	beq.n	8005834 <UART_SetConfig+0xd9c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d037      	beq.n	8005830 <UART_SetConfig+0xd98>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d031      	beq.n	800582c <UART_SetConfig+0xd94>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d02b      	beq.n	8005828 <UART_SetConfig+0xd90>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d025      	beq.n	8005824 <UART_SetConfig+0xd8c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d01f      	beq.n	8005820 <UART_SetConfig+0xd88>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b07      	cmp	r3, #7
 80057e6:	d019      	beq.n	800581c <UART_SetConfig+0xd84>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d013      	beq.n	8005818 <UART_SetConfig+0xd80>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	d00d      	beq.n	8005814 <UART_SetConfig+0xd7c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b0a      	cmp	r3, #10
 80057fe:	d007      	beq.n	8005810 <UART_SetConfig+0xd78>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2b0b      	cmp	r3, #11
 8005806:	d101      	bne.n	800580c <UART_SetConfig+0xd74>
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <UART_SetConfig+0xfa8>)
 800580a:	e016      	b.n	800583a <UART_SetConfig+0xda2>
 800580c:	4b8d      	ldr	r3, [pc, #564]	; (8005a44 <UART_SetConfig+0xfac>)
 800580e:	e014      	b.n	800583a <UART_SetConfig+0xda2>
 8005810:	4b8d      	ldr	r3, [pc, #564]	; (8005a48 <UART_SetConfig+0xfb0>)
 8005812:	e012      	b.n	800583a <UART_SetConfig+0xda2>
 8005814:	4b8d      	ldr	r3, [pc, #564]	; (8005a4c <UART_SetConfig+0xfb4>)
 8005816:	e010      	b.n	800583a <UART_SetConfig+0xda2>
 8005818:	4b8d      	ldr	r3, [pc, #564]	; (8005a50 <UART_SetConfig+0xfb8>)
 800581a:	e00e      	b.n	800583a <UART_SetConfig+0xda2>
 800581c:	4b8d      	ldr	r3, [pc, #564]	; (8005a54 <UART_SetConfig+0xfbc>)
 800581e:	e00c      	b.n	800583a <UART_SetConfig+0xda2>
 8005820:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <UART_SetConfig+0xfc0>)
 8005822:	e00a      	b.n	800583a <UART_SetConfig+0xda2>
 8005824:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <UART_SetConfig+0xfc4>)
 8005826:	e008      	b.n	800583a <UART_SetConfig+0xda2>
 8005828:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <UART_SetConfig+0xfc8>)
 800582a:	e006      	b.n	800583a <UART_SetConfig+0xda2>
 800582c:	4b8d      	ldr	r3, [pc, #564]	; (8005a64 <UART_SetConfig+0xfcc>)
 800582e:	e004      	b.n	800583a <UART_SetConfig+0xda2>
 8005830:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <UART_SetConfig+0xfd0>)
 8005832:	e002      	b.n	800583a <UART_SetConfig+0xda2>
 8005834:	4b8d      	ldr	r3, [pc, #564]	; (8005a6c <UART_SetConfig+0xfd4>)
 8005836:	e000      	b.n	800583a <UART_SetConfig+0xda2>
 8005838:	4b82      	ldr	r3, [pc, #520]	; (8005a44 <UART_SetConfig+0xfac>)
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6852      	ldr	r2, [r2, #4]
 800583e:	0852      	lsrs	r2, r2, #1
 8005840:	441a      	add	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	b29b      	uxth	r3, r3
 800584c:	61fb      	str	r3, [r7, #28]
        break;
 800584e:	e0bf      	b.n	80059d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005850:	f7fd fcfe 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8005854:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b00      	cmp	r3, #0
 800585c:	d044      	beq.n	80058e8 <UART_SetConfig+0xe50>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b01      	cmp	r3, #1
 8005864:	d03e      	beq.n	80058e4 <UART_SetConfig+0xe4c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	2b02      	cmp	r3, #2
 800586c:	d038      	beq.n	80058e0 <UART_SetConfig+0xe48>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	2b03      	cmp	r3, #3
 8005874:	d032      	beq.n	80058dc <UART_SetConfig+0xe44>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b04      	cmp	r3, #4
 800587c:	d02c      	beq.n	80058d8 <UART_SetConfig+0xe40>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b05      	cmp	r3, #5
 8005884:	d026      	beq.n	80058d4 <UART_SetConfig+0xe3c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b06      	cmp	r3, #6
 800588c:	d020      	beq.n	80058d0 <UART_SetConfig+0xe38>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	2b07      	cmp	r3, #7
 8005894:	d01a      	beq.n	80058cc <UART_SetConfig+0xe34>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	2b08      	cmp	r3, #8
 800589c:	d014      	beq.n	80058c8 <UART_SetConfig+0xe30>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	d00e      	beq.n	80058c4 <UART_SetConfig+0xe2c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	2b0a      	cmp	r3, #10
 80058ac:	d008      	beq.n	80058c0 <UART_SetConfig+0xe28>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	2b0b      	cmp	r3, #11
 80058b4:	d102      	bne.n	80058bc <UART_SetConfig+0xe24>
 80058b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ba:	e016      	b.n	80058ea <UART_SetConfig+0xe52>
 80058bc:	2301      	movs	r3, #1
 80058be:	e014      	b.n	80058ea <UART_SetConfig+0xe52>
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	e012      	b.n	80058ea <UART_SetConfig+0xe52>
 80058c4:	2340      	movs	r3, #64	; 0x40
 80058c6:	e010      	b.n	80058ea <UART_SetConfig+0xe52>
 80058c8:	2320      	movs	r3, #32
 80058ca:	e00e      	b.n	80058ea <UART_SetConfig+0xe52>
 80058cc:	2310      	movs	r3, #16
 80058ce:	e00c      	b.n	80058ea <UART_SetConfig+0xe52>
 80058d0:	230c      	movs	r3, #12
 80058d2:	e00a      	b.n	80058ea <UART_SetConfig+0xe52>
 80058d4:	230a      	movs	r3, #10
 80058d6:	e008      	b.n	80058ea <UART_SetConfig+0xe52>
 80058d8:	2308      	movs	r3, #8
 80058da:	e006      	b.n	80058ea <UART_SetConfig+0xe52>
 80058dc:	2306      	movs	r3, #6
 80058de:	e004      	b.n	80058ea <UART_SetConfig+0xe52>
 80058e0:	2304      	movs	r3, #4
 80058e2:	e002      	b.n	80058ea <UART_SetConfig+0xe52>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e000      	b.n	80058ea <UART_SetConfig+0xe52>
 80058e8:	2301      	movs	r3, #1
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	005a      	lsls	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	441a      	add	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	b29b      	uxth	r3, r3
 8005904:	61fb      	str	r3, [r7, #28]
        break;
 8005906:	e063      	b.n	80059d0 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d04f      	beq.n	80059b0 <UART_SetConfig+0xf18>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b01      	cmp	r3, #1
 8005916:	d048      	beq.n	80059aa <UART_SetConfig+0xf12>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b02      	cmp	r3, #2
 800591e:	d041      	beq.n	80059a4 <UART_SetConfig+0xf0c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	2b03      	cmp	r3, #3
 8005926:	d03a      	beq.n	800599e <UART_SetConfig+0xf06>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b04      	cmp	r3, #4
 800592e:	d033      	beq.n	8005998 <UART_SetConfig+0xf00>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b05      	cmp	r3, #5
 8005936:	d02c      	beq.n	8005992 <UART_SetConfig+0xefa>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b06      	cmp	r3, #6
 800593e:	d025      	beq.n	800598c <UART_SetConfig+0xef4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	2b07      	cmp	r3, #7
 8005946:	d01e      	beq.n	8005986 <UART_SetConfig+0xeee>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b08      	cmp	r3, #8
 800594e:	d017      	beq.n	8005980 <UART_SetConfig+0xee8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b09      	cmp	r3, #9
 8005956:	d010      	beq.n	800597a <UART_SetConfig+0xee2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	2b0a      	cmp	r3, #10
 800595e:	d009      	beq.n	8005974 <UART_SetConfig+0xedc>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b0b      	cmp	r3, #11
 8005966:	d102      	bne.n	800596e <UART_SetConfig+0xed6>
 8005968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800596c:	e022      	b.n	80059b4 <UART_SetConfig+0xf1c>
 800596e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005972:	e01f      	b.n	80059b4 <UART_SetConfig+0xf1c>
 8005974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005978:	e01c      	b.n	80059b4 <UART_SetConfig+0xf1c>
 800597a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597e:	e019      	b.n	80059b4 <UART_SetConfig+0xf1c>
 8005980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005984:	e016      	b.n	80059b4 <UART_SetConfig+0xf1c>
 8005986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800598a:	e013      	b.n	80059b4 <UART_SetConfig+0xf1c>
 800598c:	f241 5354 	movw	r3, #5460	; 0x1554
 8005990:	e010      	b.n	80059b4 <UART_SetConfig+0xf1c>
 8005992:	f641 1398 	movw	r3, #6552	; 0x1998
 8005996:	e00d      	b.n	80059b4 <UART_SetConfig+0xf1c>
 8005998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800599c:	e00a      	b.n	80059b4 <UART_SetConfig+0xf1c>
 800599e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80059a2:	e007      	b.n	80059b4 <UART_SetConfig+0xf1c>
 80059a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059a8:	e004      	b.n	80059b4 <UART_SetConfig+0xf1c>
 80059aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ae:	e001      	b.n	80059b4 <UART_SetConfig+0xf1c>
 80059b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6852      	ldr	r2, [r2, #4]
 80059b8:	0852      	lsrs	r2, r2, #1
 80059ba:	441a      	add	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	61fb      	str	r3, [r7, #28]
        break;
 80059c8:	e002      	b.n	80059d0 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	76fb      	strb	r3, [r7, #27]
        break;
 80059ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d916      	bls.n	8005a04 <UART_SetConfig+0xf6c>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d212      	bcs.n	8005a04 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f023 030f 	bic.w	r3, r3, #15
 80059e6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	89fa      	ldrh	r2, [r7, #14]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e20c      	b.n	8005e1e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	76fb      	strb	r3, [r7, #27]
 8005a08:	e209      	b.n	8005e1e <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8005a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	f200 81f4 	bhi.w	8005dfc <UART_SetConfig+0x1364>
 8005a14:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0xf84>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a71 	.word	0x08005a71
 8005a20:	08005b27 	.word	0x08005b27
 8005a24:	08005bdd 	.word	0x08005bdd
 8005a28:	08005dfd 	.word	0x08005dfd
 8005a2c:	08005c87 	.word	0x08005c87
 8005a30:	08005dfd 	.word	0x08005dfd
 8005a34:	08005dfd 	.word	0x08005dfd
 8005a38:	08005dfd 	.word	0x08005dfd
 8005a3c:	08005d3d 	.word	0x08005d3d
 8005a40:	0001e848 	.word	0x0001e848
 8005a44:	01e84800 	.word	0x01e84800
 8005a48:	0003d090 	.word	0x0003d090
 8005a4c:	0007a120 	.word	0x0007a120
 8005a50:	000f4240 	.word	0x000f4240
 8005a54:	001e8480 	.word	0x001e8480
 8005a58:	0028b0aa 	.word	0x0028b0aa
 8005a5c:	0030d400 	.word	0x0030d400
 8005a60:	003d0900 	.word	0x003d0900
 8005a64:	00516154 	.word	0x00516154
 8005a68:	007a1200 	.word	0x007a1200
 8005a6c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a70:	f7fd fc5a 	bl	8003328 <HAL_RCC_GetPCLK1Freq>
 8005a74:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d044      	beq.n	8005b08 <UART_SetConfig+0x1070>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d03e      	beq.n	8005b04 <UART_SetConfig+0x106c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d038      	beq.n	8005b00 <UART_SetConfig+0x1068>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d032      	beq.n	8005afc <UART_SetConfig+0x1064>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d02c      	beq.n	8005af8 <UART_SetConfig+0x1060>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d026      	beq.n	8005af4 <UART_SetConfig+0x105c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d020      	beq.n	8005af0 <UART_SetConfig+0x1058>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b07      	cmp	r3, #7
 8005ab4:	d01a      	beq.n	8005aec <UART_SetConfig+0x1054>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d014      	beq.n	8005ae8 <UART_SetConfig+0x1050>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b09      	cmp	r3, #9
 8005ac4:	d00e      	beq.n	8005ae4 <UART_SetConfig+0x104c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b0a      	cmp	r3, #10
 8005acc:	d008      	beq.n	8005ae0 <UART_SetConfig+0x1048>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b0b      	cmp	r3, #11
 8005ad4:	d102      	bne.n	8005adc <UART_SetConfig+0x1044>
 8005ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ada:	e016      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e014      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005ae0:	2380      	movs	r3, #128	; 0x80
 8005ae2:	e012      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	e010      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005ae8:	2320      	movs	r3, #32
 8005aea:	e00e      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005aec:	2310      	movs	r3, #16
 8005aee:	e00c      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005af0:	230c      	movs	r3, #12
 8005af2:	e00a      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005af4:	230a      	movs	r3, #10
 8005af6:	e008      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005af8:	2308      	movs	r3, #8
 8005afa:	e006      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005afc:	2306      	movs	r3, #6
 8005afe:	e004      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005b00:	2304      	movs	r3, #4
 8005b02:	e002      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e000      	b.n	8005b0a <UART_SetConfig+0x1072>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	61fb      	str	r3, [r7, #28]
        break;
 8005b24:	e16d      	b.n	8005e02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b26:	f7fd fc15 	bl	8003354 <HAL_RCC_GetPCLK2Freq>
 8005b2a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d044      	beq.n	8005bbe <UART_SetConfig+0x1126>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d03e      	beq.n	8005bba <UART_SetConfig+0x1122>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d038      	beq.n	8005bb6 <UART_SetConfig+0x111e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d032      	beq.n	8005bb2 <UART_SetConfig+0x111a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d02c      	beq.n	8005bae <UART_SetConfig+0x1116>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d026      	beq.n	8005baa <UART_SetConfig+0x1112>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b06      	cmp	r3, #6
 8005b62:	d020      	beq.n	8005ba6 <UART_SetConfig+0x110e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	d01a      	beq.n	8005ba2 <UART_SetConfig+0x110a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d014      	beq.n	8005b9e <UART_SetConfig+0x1106>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b09      	cmp	r3, #9
 8005b7a:	d00e      	beq.n	8005b9a <UART_SetConfig+0x1102>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	2b0a      	cmp	r3, #10
 8005b82:	d008      	beq.n	8005b96 <UART_SetConfig+0x10fe>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	2b0b      	cmp	r3, #11
 8005b8a:	d102      	bne.n	8005b92 <UART_SetConfig+0x10fa>
 8005b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b90:	e016      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e014      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005b96:	2380      	movs	r3, #128	; 0x80
 8005b98:	e012      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	e010      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	e00e      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	e00c      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	e00a      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005baa:	230a      	movs	r3, #10
 8005bac:	e008      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	e006      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005bb2:	2306      	movs	r3, #6
 8005bb4:	e004      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e002      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e000      	b.n	8005bc0 <UART_SetConfig+0x1128>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	61fb      	str	r3, [r7, #28]
        break;
 8005bda:	e112      	b.n	8005e02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d044      	beq.n	8005c6e <UART_SetConfig+0x11d6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d03e      	beq.n	8005c6a <UART_SetConfig+0x11d2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d038      	beq.n	8005c66 <UART_SetConfig+0x11ce>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d032      	beq.n	8005c62 <UART_SetConfig+0x11ca>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d02c      	beq.n	8005c5e <UART_SetConfig+0x11c6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	d026      	beq.n	8005c5a <UART_SetConfig+0x11c2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d020      	beq.n	8005c56 <UART_SetConfig+0x11be>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b07      	cmp	r3, #7
 8005c1a:	d01a      	beq.n	8005c52 <UART_SetConfig+0x11ba>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d014      	beq.n	8005c4e <UART_SetConfig+0x11b6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2b09      	cmp	r3, #9
 8005c2a:	d00e      	beq.n	8005c4a <UART_SetConfig+0x11b2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	2b0a      	cmp	r3, #10
 8005c32:	d008      	beq.n	8005c46 <UART_SetConfig+0x11ae>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	2b0b      	cmp	r3, #11
 8005c3a:	d102      	bne.n	8005c42 <UART_SetConfig+0x11aa>
 8005c3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005c40:	e016      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c42:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <UART_SetConfig+0x13b0>)
 8005c44:	e014      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c46:	4b81      	ldr	r3, [pc, #516]	; (8005e4c <UART_SetConfig+0x13b4>)
 8005c48:	e012      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c4a:	4b81      	ldr	r3, [pc, #516]	; (8005e50 <UART_SetConfig+0x13b8>)
 8005c4c:	e010      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c4e:	4b81      	ldr	r3, [pc, #516]	; (8005e54 <UART_SetConfig+0x13bc>)
 8005c50:	e00e      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c52:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <UART_SetConfig+0x13c0>)
 8005c54:	e00c      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c56:	4b81      	ldr	r3, [pc, #516]	; (8005e5c <UART_SetConfig+0x13c4>)
 8005c58:	e00a      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c5a:	4b81      	ldr	r3, [pc, #516]	; (8005e60 <UART_SetConfig+0x13c8>)
 8005c5c:	e008      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c5e:	4b81      	ldr	r3, [pc, #516]	; (8005e64 <UART_SetConfig+0x13cc>)
 8005c60:	e006      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c62:	4b81      	ldr	r3, [pc, #516]	; (8005e68 <UART_SetConfig+0x13d0>)
 8005c64:	e004      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c66:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <UART_SetConfig+0x13d4>)
 8005c68:	e002      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c6a:	4b81      	ldr	r3, [pc, #516]	; (8005e70 <UART_SetConfig+0x13d8>)
 8005c6c:	e000      	b.n	8005c70 <UART_SetConfig+0x11d8>
 8005c6e:	4b76      	ldr	r3, [pc, #472]	; (8005e48 <UART_SetConfig+0x13b0>)
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	0852      	lsrs	r2, r2, #1
 8005c76:	441a      	add	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e0bd      	b.n	8005e02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fd fae3 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8005c8a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d044      	beq.n	8005d1e <UART_SetConfig+0x1286>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d03e      	beq.n	8005d1a <UART_SetConfig+0x1282>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d038      	beq.n	8005d16 <UART_SetConfig+0x127e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d032      	beq.n	8005d12 <UART_SetConfig+0x127a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d02c      	beq.n	8005d0e <UART_SetConfig+0x1276>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d026      	beq.n	8005d0a <UART_SetConfig+0x1272>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d020      	beq.n	8005d06 <UART_SetConfig+0x126e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b07      	cmp	r3, #7
 8005cca:	d01a      	beq.n	8005d02 <UART_SetConfig+0x126a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d014      	beq.n	8005cfe <UART_SetConfig+0x1266>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d00e      	beq.n	8005cfa <UART_SetConfig+0x1262>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b0a      	cmp	r3, #10
 8005ce2:	d008      	beq.n	8005cf6 <UART_SetConfig+0x125e>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b0b      	cmp	r3, #11
 8005cea:	d102      	bne.n	8005cf2 <UART_SetConfig+0x125a>
 8005cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf0:	e016      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e014      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	e012      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005cfa:	2340      	movs	r3, #64	; 0x40
 8005cfc:	e010      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005cfe:	2320      	movs	r3, #32
 8005d00:	e00e      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d02:	2310      	movs	r3, #16
 8005d04:	e00c      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d06:	230c      	movs	r3, #12
 8005d08:	e00a      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d0a:	230a      	movs	r3, #10
 8005d0c:	e008      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	e006      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d12:	2306      	movs	r3, #6
 8005d14:	e004      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d16:	2304      	movs	r3, #4
 8005d18:	e002      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e000      	b.n	8005d20 <UART_SetConfig+0x1288>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	61fb      	str	r3, [r7, #28]
        break;
 8005d3a:	e062      	b.n	8005e02 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d04e      	beq.n	8005de2 <UART_SetConfig+0x134a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d047      	beq.n	8005ddc <UART_SetConfig+0x1344>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d040      	beq.n	8005dd6 <UART_SetConfig+0x133e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d039      	beq.n	8005dd0 <UART_SetConfig+0x1338>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d032      	beq.n	8005dca <UART_SetConfig+0x1332>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d02b      	beq.n	8005dc4 <UART_SetConfig+0x132c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d024      	beq.n	8005dbe <UART_SetConfig+0x1326>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	2b07      	cmp	r3, #7
 8005d7a:	d01d      	beq.n	8005db8 <UART_SetConfig+0x1320>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d016      	beq.n	8005db2 <UART_SetConfig+0x131a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b09      	cmp	r3, #9
 8005d8a:	d00f      	beq.n	8005dac <UART_SetConfig+0x1314>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b0a      	cmp	r3, #10
 8005d92:	d008      	beq.n	8005da6 <UART_SetConfig+0x130e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b0b      	cmp	r3, #11
 8005d9a:	d101      	bne.n	8005da0 <UART_SetConfig+0x1308>
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	e022      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da4:	e01f      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005daa:	e01c      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005db0:	e019      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005db6:	e016      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005db8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dbc:	e013      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dbe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005dc2:	e010      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dc4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005dc8:	e00d      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dce:	e00a      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dd0:	f241 5355 	movw	r3, #5461	; 0x1555
 8005dd4:	e007      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dda:	e004      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005de0:	e001      	b.n	8005de6 <UART_SetConfig+0x134e>
 8005de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6852      	ldr	r2, [r2, #4]
 8005dea:	0852      	lsrs	r2, r2, #1
 8005dec:	441a      	add	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	61fb      	str	r3, [r7, #28]
        break;
 8005dfa:	e002      	b.n	8005e02 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	76fb      	strb	r3, [r7, #27]
        break;
 8005e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d908      	bls.n	8005e1a <UART_SetConfig+0x1382>
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0e:	d204      	bcs.n	8005e1a <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e001      	b.n	8005e1e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005e3a:	7efb      	ldrb	r3, [r7, #27]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	; 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005e46:	bf00      	nop
 8005e48:	00f42400 	.word	0x00f42400
 8005e4c:	0001e848 	.word	0x0001e848
 8005e50:	0003d090 	.word	0x0003d090
 8005e54:	0007a120 	.word	0x0007a120
 8005e58:	000f4240 	.word	0x000f4240
 8005e5c:	00145855 	.word	0x00145855
 8005e60:	00186a00 	.word	0x00186a00
 8005e64:	001e8480 	.word	0x001e8480
 8005e68:	0028b0aa 	.word	0x0028b0aa
 8005e6c:	003d0900 	.word	0x003d0900
 8005e70:	007a1200 	.word	0x007a1200

08005e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01a      	beq.n	8005f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f72:	d10a      	bne.n	8005f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
  }
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005fc8:	f7fb fbce 	bl	8001768 <HAL_GetTick>
 8005fcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d10e      	bne.n	8005ffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f82c 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e022      	b.n	8006040 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d10e      	bne.n	8006026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f816 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e00c      	b.n	8006040 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	e02c      	b.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d028      	beq.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fb fb81 	bl	8001768 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11d      	bne.n	80060b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006086:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e00f      	b.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4013      	ands	r3, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bf0c      	ite	eq
 80060c4:	2301      	moveq	r3, #1
 80060c6:	2300      	movne	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d0c3      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e027      	b.n	8006142 <HAL_UARTEx_DisableFifoMode+0x66>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2224      	movs	r2, #36	; 0x24
 80060fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006120:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2220      	movs	r2, #32
 8006134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006162:	2302      	movs	r3, #2
 8006164:	e02d      	b.n	80061c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2224      	movs	r2, #36	; 0x24
 8006172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f850 	bl	8006248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061de:	2302      	movs	r3, #2
 80061e0:	e02d      	b.n	800623e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2224      	movs	r2, #36	; 0x24
 80061ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f812 	bl	8006248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006250:	4a2f      	ldr	r2, [pc, #188]	; (8006310 <UARTEx_SetNbDataToProcess+0xc8>)
 8006252:	f107 0314 	add.w	r3, r7, #20
 8006256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800625a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800625e:	4a2d      	ldr	r2, [pc, #180]	; (8006314 <UARTEx_SetNbDataToProcess+0xcc>)
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006268:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006284:	e03d      	b.n	8006302 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006286:	2308      	movs	r3, #8
 8006288:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800628a:	2308      	movs	r3, #8
 800628c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	0e5b      	lsrs	r3, r3, #25
 8006296:	b2db      	uxtb	r3, r3
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	0f5b      	lsrs	r3, r3, #29
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80062ae:	7fbb      	ldrb	r3, [r7, #30]
 80062b0:	7f3a      	ldrb	r2, [r7, #28]
 80062b2:	f107 0120 	add.w	r1, r7, #32
 80062b6:	440a      	add	r2, r1
 80062b8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	7f3a      	ldrb	r2, [r7, #28]
 80062c2:	f107 0120 	add.w	r1, r7, #32
 80062c6:	440a      	add	r2, r1
 80062c8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80062d8:	7ffb      	ldrb	r3, [r7, #31]
 80062da:	7f7a      	ldrb	r2, [r7, #29]
 80062dc:	f107 0120 	add.w	r1, r7, #32
 80062e0:	440a      	add	r2, r1
 80062e2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	7f7a      	ldrb	r2, [r7, #29]
 80062ec:	f107 0120 	add.w	r1, r7, #32
 80062f0:	440a      	add	r2, r1
 80062f2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80062f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006302:	bf00      	nop
 8006304:	3724      	adds	r7, #36	; 0x24
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	08006388 	.word	0x08006388
 8006314:	08006390 	.word	0x08006390

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4e0d      	ldr	r6, [pc, #52]	; (8006350 <__libc_init_array+0x38>)
 800631c:	4c0d      	ldr	r4, [pc, #52]	; (8006354 <__libc_init_array+0x3c>)
 800631e:	1ba4      	subs	r4, r4, r6
 8006320:	10a4      	asrs	r4, r4, #2
 8006322:	2500      	movs	r5, #0
 8006324:	42a5      	cmp	r5, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	4e0b      	ldr	r6, [pc, #44]	; (8006358 <__libc_init_array+0x40>)
 800632a:	4c0c      	ldr	r4, [pc, #48]	; (800635c <__libc_init_array+0x44>)
 800632c:	f000 f820 	bl	8006370 <_init>
 8006330:	1ba4      	subs	r4, r4, r6
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	2500      	movs	r5, #0
 8006336:	42a5      	cmp	r5, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006340:	4798      	blx	r3
 8006342:	3501      	adds	r5, #1
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800634a:	4798      	blx	r3
 800634c:	3501      	adds	r5, #1
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	080063b8 	.word	0x080063b8
 8006354:	080063b8 	.word	0x080063b8
 8006358:	080063b8 	.word	0x080063b8
 800635c:	080063bc 	.word	0x080063bc

08006360 <memset>:
 8006360:	4402      	add	r2, r0
 8006362:	4603      	mov	r3, r0
 8006364:	4293      	cmp	r3, r2
 8006366:	d100      	bne.n	800636a <memset+0xa>
 8006368:	4770      	bx	lr
 800636a:	f803 1b01 	strb.w	r1, [r3], #1
 800636e:	e7f9      	b.n	8006364 <memset+0x4>

08006370 <_init>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr

0800637c <_fini>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr
